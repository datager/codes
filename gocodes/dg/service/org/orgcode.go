package org

//
//import (
//	"fmt"
//	"log"
//	"math"
//)
//
//func main() {
//	//fmt.Print(MaxOrgNum)
//
//	//xx := GetFullOrgCodesToBeAllocate(3, 99990000)
//	//fmt.Println(xx)
//
//	orgCode, err := GetNewOrgCode("0000")
//	if err != nil {
//		log.Print(err)
//	}
//	log.Print(orgCode)
//}
//
//// -------------------------------data struct-------------------------------
//const (
//	MaxOrgNumPerLevel = 100
//	MaxOrgLevel       = 4
//)
//
//var MaxOrgNum = powInt64(MaxOrgNumPerLevel, MaxOrgLevel)
//
//type Org struct {
//	OrgID   string
//	Level   int64
//	OrgCode int64
//}
//
//// -------------------------------public func allocate-------------------------------
//// level1 -1
//// level2 100^4/100
//// level3
//func GetNewOrgCode(superOrgID string) (int64, error) {
//	superOrg := getOrgByID(superOrgID)
//
//	OrgCodesToBeAllocate := GetFullOrgCodesToBeAllocate(superOrg.Level, superOrg.OrgCode)
//	OrgCodesAllocated := getOrgCodeByLevel(superOrg.Level)
//
//	return checkAndGetOrgCode(OrgCodesToBeAllocate, OrgCodesAllocated)
//}
//
//// -------------------------------private func allocate-------------------------------
//func getOrgByID(orgID string) *Org {
//	return &Org{
//		OrgID: orgID,
//	}
//}
//
//// -------------------------------public func search-------------------------------
//type SearchReqByOrgCode struct {
//	isNeed     bool
//	minOrgCode int64 // >=
//	maxOrgCode int64 // <
//}
//
//func getOrgCodeRangeByOrgID(orgID string) (orgCodeReq *SearchReqByOrgCode, err error) {
//	org := getOrgByID(orgID)
//
//	if org.Level == 1 {
//		return &SearchReqByOrgCode{
//			isNeed: false,
//		}, nil
//	}
//
//	_orgStep := MaxOrgNum / powInt64(MaxOrgNumPerLevel, org.Level-1)
//	return &SearchReqByOrgCode{
//		isNeed:     true,
//		minOrgCode: org.OrgCode,
//		maxOrgCode: org.OrgCode + _orgStep,
//	}, nil
//}
//
//type SearchReqKind int64
//
//var (
//	searchReqKindOrgCode     SearchReqKind
//	searchReqKindSensorID    SearchReqKind
//	searchReqKindSensorIntID SearchReqKind
//)
//
//type searchReq struct {
//	kind            SearchReqKind
//	reqOrgCodes     SearchReqByOrgCode
//	reqSensorIDs    []string
//	reqSensorIntIDs []int64
//}
//
//// waste
//func getOrgByLevel(orgLevel int64) []*Org {
//	return []*Org{
//		&Org{Level: orgLevel, OrgCode: 0},
//		&Org{Level: orgLevel, OrgCode: 100 ^ 2},
//	}
//}
//
//func getOrgCodeByLevel(orgLevel int64) []int64 {
//	return []int64{0, powInt64(100, 1), powInt64(100, 2)}
//}
//
//// in:  superOrgLevel: 1, superOrgCode: 0
//// out: [1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 11000000 12000000 13000000 14000000 15000000 16000000 17000000 18000000 19000000 20000000 21000000 22000000 23000000 24000000 25000000 26000000 27000000 28000000 29000000 30000000 31000000 32000000 33000000 34000000 35000000 36000000 37000000 38000000 39000000 40000000 41000000 42000000 43000000 44000000 45000000 46000000 47000000 48000000 49000000 50000000 51000000 52000000 53000000 54000000 55000000 56000000 57000000 58000000 59000000 60000000 61000000 62000000 63000000 64000000 65000000 66000000 67000000 68000000 69000000 70000000 71000000 72000000 73000000 74000000 75000000 76000000 77000000 78000000 79000000 80000000 81000000 82000000 83000000 84000000 85000000 86000000 87000000 88000000 89000000 90000000 91000000 92000000 93000000 94000000 95000000 96000000 97000000 98000000 99000000]
//
//// in: superOrgLevel: 2, superOrgCode: 1000000
//// out: [1010000 1020000 1030000 1040000 1050000 1060000 1070000 1080000 1090000 1100000 1110000 1120000 1130000 1140000 1150000 1160000 1170000 1180000 1190000 1200000 1210000 1220000 1230000 1240000 1250000 1260000 1270000 1280000 1290000 1300000 1310000 1320000 1330000 1340000 1350000 1360000 1370000 1380000 1390000 1400000 1410000 1420000 1430000 1440000 1450000 1460000 1470000 1480000 1490000 1500000 1510000 1520000 1530000 1540000 1550000 1560000 1570000 1580000 1590000 1600000 1610000 1620000 1630000 1640000 1650000 1660000 1670000 1680000 1690000 1700000 1710000 1720000 1730000 1740000 1750000 1760000 1770000 1780000 1790000 1800000 1810000 1820000 1830000 1840000 1850000 1860000 1870000 1880000 1890000 1900000 1910000 1920000 1930000 1940000 1950000 1960000 1970000 1980000 1990000]
//
//// in: superOrgLevel: 3, superOrgCode: 1010000
//// out: [1010100 1010200 1010300 1010400 1010500 1010600 1010700 1010800 1010900 1011000 1011100 1011200 1011300 1011400 1011500 1011600 1011700 1011800 1011900 1012000 1012100 1012200 1012300 1012400 1012500 1012600 1012700 1012800 1012900 1013000 1013100 1013200 1013300 1013400 1013500 1013600 1013700 1013800 1013900 1014000 1014100 1014200 1014300 1014400 1014500 1014600 1014700 1014800 1014900 1015000 1015100 1015200 1015300 1015400 1015500 1015600 1015700 1015800 1015900 1016000 1016100 1016200 1016300 1016400 1016500 1016600 1016700 1016800 1016900 1017000 1017100 1017200 1017300 1017400 1017500 1017600 1017700 1017800 1017900 1018000 1018100 1018200 1018300 1018400 1018500 1018600 1018700 1018800 1018900 1019000 1019100 1019200 1019300 1019400 1019500 1019600 1019700 1019800 1019900]
//
//// in: superOrgLevel: 4, superOrgCode: 1010100
//// out: [1010101 1010102 1010103 1010104 1010105 1010106 1010107 1010108 1010109 1010110 1010111 1010112 1010113 1010114 1010115 1010116 1010117 1010118 1010119 1010120 1010121 1010122 1010123 1010124 1010125 1010126 1010127 1010128 1010129 1010130 1010131 1010132 1010133 1010134 1010135 1010136 1010137 1010138 1010139 1010140 1010141 1010142 1010143 1010144 1010145 1010146 1010147 1010148 1010149 1010150 1010151 1010152 1010153 1010154 1010155 1010156 1010157 1010158 1010159 1010160 1010161 1010162 1010163 1010164 1010165 1010166 1010167 1010168 1010169 1010170 1010171 1010172 1010173 1010174 1010175 1010176 1010177 1010178 1010179 1010180 1010181 1010182 1010183 1010184 1010185 1010186 1010187 1010188 1010189 1010190 1010191 1010192 1010193 1010194 1010195 1010196 1010197 1010198 1010199]
//
//// in: superOrgLevel: 2, superOrgCode: 99000000
//// out
//
//// in: superOrgLevel: 3, superOrgCode: 99990000
//// out
//
//// in: superOrgLevel: 4, superOrgCode: 99999900
//// out
//func GetFullOrgCodesToBeAllocate(superOrgLevel, superOrgCode int64) []int64 {
//	var orgCodes []int64
//	for i := 1; i < MaxOrgNumPerLevel; i++ {
//		//xx := powInt64(MaxOrgNumPerLevel, superOrgLevel)
//		//yy := MaxOrgNum / xx
//		//zz := superOrgCode + int64(i)*yy
//		//fmt.Print(xx, yy, zz)
//		orgCodes = append(orgCodes, superOrgCode+int64(i)*(MaxOrgNum/(powInt64(MaxOrgNumPerLevel, superOrgLevel))))
//	}
//	return orgCodes
//}
//
//// allocated: sorted(for Convenience)
//// tobeAllocate: sorted(for Convenience)
//func checkAndGetOrgCode(tobeAllocate, allocated []int64) (int64, error) {
//	remainOrgCode := GetDifferenceSetAThanB(tobeAllocate, allocated)
//	if len(remainOrgCode) == 0 {
//		return -2, fmt.Errorf("no org code remaining, len(allocated):%v, len(tobeAllocate):%v", allocated, tobeAllocate)
//	}
//	return remainOrgCode[0], nil // pick one
//}
//
//// -------------------------------util-------------------------------
//// a 相对 b 的差集: 即属于 a, 但是不属于 b 的
//// a: 12345
//// b: 34567
//// differentSet(a, b): 12
//// differentSet(b, a): 67
//// intersection(a, b): 345
//// union(a, b): 1234567
//// isSubset(a, b): false
//// isSubset(b, a): false
//// removeDuplicated(11223445): 12345
//func GetDifferenceSetAThanB(sa, sb []int64) (differentSetAThanB []int64) {
//	if len(sb) == 0 {
//		return sa
//	}
//
//	differentSetAThanB = make([]int64, 0)
//	for _, a := range sa {
//		if !IsItemInSlice(a, sb) {
//			differentSetAThanB = append(differentSetAThanB, a)
//		}
//	}
//	return
//}
//
//func IsItemInSlice(item int64, slice []int64) bool {
//	for _, s := range slice {
//		if item == s {
//			return true
//		}
//	}
//	return false
//}
//
//func powInt64(x, y int64) int64 {
//	return int64(math.Pow(float64(x), float64(y)))
//}
