package org

import (
	"codes/gocodes/dg/utils/math"
	"github.com/pkg/errors"
)

func main() {
	//xx := GetOrgCodesToBeAllocate(0, 0)
	//fmt.Print(xx)
	// [100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000 1100000000 1200000000 1300000000 1400000000 1500000000 1600000000 1700000000 1800000000 1900000000 2000000000 2100000000 2200000000 2300000000 2400000000 2500000000 2600000000 2700000000 2800000000 2900000000 3000000000 3100000000 3200000000 3300000000 3400000000 3500000000 3600000000 3700000000 3800000000 3900000000 4000000000 4100000000 4200000000 4300000000 4400000000 4500000000 4600000000 4700000000 4800000000 4900000000 5000000000 5100000000 5200000000 5300000000 5400000000 5500000000 5600000000 5700000000 5800000000 5900000000 6000000000 6100000000 6200000000 6300000000 6400000000 6500000000 6600000000 6700000000 6800000000 6900000000 7000000000 7100000000 7200000000 7300000000 7400000000 7500000000 7600000000 7700000000 7800000000 7900000000 8000000000 8100000000 8200000000 8300000000 8400000000 8500000000 8600000000 8700000000 8800000000 8900000000 9000000000 9100000000 9200000000 9300000000 9400000000 9500000000 9600000000 9700000000 9800000000 9900000000]

	//xx := GetOrgCodesToBeAllocate(1, 100000000)
	//fmt.Print(xx)
	

	//xx := GetOrgCodesToBeAllocate(2, 199000000)
	//fmt.Print(xx)
	

	//xx := GetOrgCodesToBeAllocate(3, 199990000)
	//fmt.Print(xx)
	

	//xx := GetOrgCodesToBeAllocate(4, 199999900)
	//fmt.Print(xx)
	
}

const (
	RootOrgLevel   = 1
	RootOrgCode    = -1
	InValidOrgCode = -2
)

var (
	MaxOrgNumPerLevel int64
	MaxOrgLevel       int64
	MaxOrgNum         int64
)

func init() {
	LoadOrgConfVal()
}
func LoadOrgConfVal() {
	MaxOrgNumPerLevel = 100
	MaxOrgLevel = 4
	MaxOrgNum = math.PowInt64(MaxOrgNumPerLevel, MaxOrgLevel)
}

func GetOrgCodesToBeAllocate(superOrgLevel, superOrgCode int64) []int64 {
	var orgCodes []int64
	for i := 1; i < int(MaxOrgNumPerLevel); i++ {
		orgCodes = append(orgCodes, superOrgCode+int64(i)*(MaxOrgNum/(math.PowInt64(MaxOrgNumPerLevel, superOrgLevel))))
	}
	return orgCodes
}

//func CheckAndPickNewOrgCode(tobeAllocate, allocated []int64) (int64, error) {
//	remainedOrgCode := slice.GetDiffIntSet(tobeAllocate, allocated)
//	if len(remainedOrgCode) == 0 {
//		fmt.Print("err org code")
//		return InValidOrgCode, fmt.Errorf("[OrgCode] no org code remaining, len(allocated):%v, len(tobeAllocate):%v, allocated:%v\n, tobeAllocate:%v", len(allocated), len(tobeAllocate), allocated, tobeAllocate)
//	}
//	return remainedOrgCode[0], nil // random pick one
//}

//---------------capture search---------------
type OrgCodeRange struct {
	IsNeedInSQL bool  // if root org(level 0): false
	MinOrgCode  int64 // >=
	MaxOrgCode  int64 // <
}

func GetOrgCodeRange(orgCode int64) (*OrgCodeRange, error) {
	if orgCode == RootOrgCode { // level 0
		return &OrgCodeRange{
			IsNeedInSQL: false,
		}, nil
	}

	var level int64
	var isValid bool
	for level = 1; level <= MaxOrgLevel; level++ {
		if orgCode%(math.PowInt64(MaxOrgNumPerLevel, MaxOrgLevel-level)) == 0 {
			isValid = true
			break
		}
	}
	if !isValid { // should not arrive
		return nil, errors.Errorf("[GetOrgCodeRange] not invalid orgCode:%v", orgCode)
	}

	_orgStep := MaxOrgNum / math.PowInt64(MaxOrgNumPerLevel, level-1)
	return &OrgCodeRange{
		IsNeedInSQL: true,
		MinOrgCode:  orgCode,
		MaxOrgCode:  orgCode + _orgStep,
	}, nil
}
