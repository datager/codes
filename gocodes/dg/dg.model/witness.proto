syntax = "proto3";

package dg.model;

import "common.proto";
import "localcommon.proto";

service WitnessService {

    rpc Recognize (WitnessRequest) returns (WitnessResponse) {
    }

    rpc BatchRecognize (WitnessBatchRequest) returns (WitnessBatchResponse) {
    }

    rpc GetIndex (IndexRequest) returns (IndexResponse) {

    }
    rpc GetIndexTxt (IndexTxtRequest) returns (IndexTxtResponse) {

    }

    rpc GetIndexVersion(IndexVersionRequest) returns (IndexVersionResponse) {

    }
}

//-属性映射文件的id枚举
enum IndexType {
    INDEX_DEFAULT = 0;
    INDEX_MOTOR = 1;
    INDEX_NON_MOTOR = 2;
    INDEX_PEDESTRIAN = 3;
    INDEX_LICENSE_PLATE = 4;
    INDEX_FACE = 5;
    INDEX_BRAND = 6;
}

//-用户自定义对象的类型
enum WitnessUserObjectType {
    WITNESS_USER_OBJECT_INVALID = 0;
    WITNESS_USER_OBJECT_FACE = 1;
    WITNESS_USER_OBJECT_MOTOR = 2;
    WITNESS_USER_OBJECT_NONMOTOR = 3;
    WITNESS_USER_OBJECT_PEDESTRIAN = 4;
}

//-用户自定义对象，目前版本只支持人脸
message WitnessUserObject {
    //-对象类型，参见枚举WitnessUserObjectType
    WitnessUserObjectType Type = 1;
    //-对象坐标（带角度的rect）,由face detect获得
    RotatedRect RotatedRect = 2;
    //-人脸的align结果，由face align获得
    FaceAlignResult AlignResult = 3;
    //-对象坐标（矩形rect）
    Rect Rect = 4;
}

//-请求属性映射json，目前不可用
message IndexRequest {
    //-属性映射json的id，参见枚举IndexType
    IndexType IndexType = 1;
}

//-请求属性映射文件
message IndexTxtRequest {
    //-属性映射文件的id，参见枚举IndexType
    IndexType IndexType = 1;
}

//-请求属性映射文件的响应
message IndexTxtResponse {
    //-属性映射文件的内容(json)
    string Context = 1;
}

//-ignored
message CommonIndex {
    message Item {
        int32 Id = 1;               // ID
        string Name = 2;            // Value
    }
    repeated Item Items = 1;
}

//-ignored
message BrandIndex {
    message Item {
        int32 MainBrandId = 2;     // 主品牌ID
        int32 SubBrandId = 3;      // 子品牌ID
        int32 YearModelId = 4;     // 年款ID
        string MainBrandName = 5;  // 主品牌名字
        string SubBrandName = 6;   // 子品牌名字
        string YearModelName = 7;  // 年款名字
    }
    repeated Item Items = 1;
}

//-ignored
message IndexResponse {
    oneof index_content {
        CommonIndex Index = 1;
        BrandIndex BrandIndex = 2;
    }
}

//-请求属性映射表的版本号
message IndexVersionRequest {
}

//-请求属性映射表的版本号的响应
message IndexVersionResponse {
    //-属性映射表的版本号
    string Version = 1;
}

//-witness单请求
message WitnessRequest {
    //-witness的请求上下文
    WitnessRequestContext Context = 1;
    //-witness的图片（一张）
    WitnessImage Image = 2;
}

//-witness多请求
message WitnessBatchRequest {
    //-witness的请求上下文
    WitnessRequestContext Context = 1;
    //-witness的图片（一张或多张）
    repeated WitnessImage Images = 2;
}

//-witness单请求的响应
message WitnessResponse {
    //-witness的响应上下文
    WitnessResponseContext Context = 1;
    //-witness结果（一个）
    WitnessResult Result = 2;
}

//-witness多请求的响应
message WitnessBatchResponse {
    //-witness的响应上下文
    WitnessResponseContext Context = 1;
    //-witness结果（多个）
    repeated WitnessResult Results = 2;
}

//-感兴趣区域（矩形）
message WitnessRelativeROI {
    int32 PosX = 1;
    int32 PosY = 2;
    int32 Width = 3;
    int32 Height = 4;
}

//-感兴趣区域（矩形）
message WitnessMarginROI {
    int32 Left = 1;
    int32 Top = 2;
    int32 Right = 3;
    int32 Bottom = 4;
}

//-感兴趣区域（多边形）的坐标点类型
enum WitnessPolygonROIType {
    INVALID = 0;
    COORDINATE = 1;
    RATIO = 2;
}

//-感兴趣区域（多边形）
message WitnessPolygonROI {
    //-感兴趣区域（多边形）的坐标点类型，参见枚举WitnessPolygonROIType
    WitnessPolygonROIType PointType = 1;
    //-过滤阈值，范围:[0.00, 1.00]，目标在多边形中的面积占目标整体面积的比例小于此比例时，目标将被过滤掉
    float FilterThreshold = 2;
    //-表示多边形的点
    repeated PointF Points = 3;
}

//-witness请求的上下文(input)
message WitnessRequestContext {
    //-请求的Session，用户指定，可以为空
    string SessionId = 1;
    //-用户名信息，需要开启验证功能
    string UserName = 2;
    //-Token验证，需要开启验证功能
    string Token = 3;
    //-功能列表，参见枚举RecognizeFunctions
    repeated int32 Functions = 4;
    //-识别类型，参见枚举RecognizeType
    int32 Type = 5;
    //-witness结果存储的信息，弃用字段
    repeated StorageConfig Storages = 6;
    //-扩展参数，目前未使用
    map<string, string> Params = 7;
    //-最小人脸，单位像素
    int32 MinFaceSize = 8;
    //-最大人脸，单位像素
    int32 MaxFaceSize = 9;
}

//-witness图片(input)
message WitnessImage {
    //-图片信息
    Image Data = 1;
    //-用户的MetaData，不建议使用，后续版本此字段将移除
    SrcMetadata WitnessMetaData = 2;
    //-感兴趣区域(矩形)
    repeated WitnessRelativeROI RelativeRoi = 3;
    //-感兴趣区域(矩形)，不建议使用，后续版本此字段将移除
    repeated WitnessMarginROI MarginRoi = 4;
    //-用户的指定的对象，目前只支持人脸对象
    repeated WitnessUserObject UserObject = 5;
    //-感兴趣区域(多边形)
    repeated WitnessPolygonROI PolygonRoi = 6;
}

//-witness响应的上下文(output)
message WitnessResponseContext {
    //-响应的Session，如果请求时Session不存在，否则为空
    string SessionId = 1;
    //-响应状态
    string Status = 2;
    //-响应状态的具体描述
    string Message = 3;
    //-请求下发给witness的时间
    Time RequestTs = 4;
    //-从witness读取内容的时间
    Time ResponseTs = 5;
    //-Debug字段，不建议使用，后续版本此字段将移除
    map<string, Time> DebugTs = 6;
}

//-witness结果(output)
message WitnessResult {
    //-响应的状态，"200"为正常，其他为异常
    string InnerStatus = 1;
    //-响应的具体信息，正常响应时为success，其他情况下为异常的具体信息
    string InnerMessage = 2;
    //-响应的图片信息
    WitnessImage Image = 3;
    //-识别到的机动车
    repeated RecVehicle Vehicles = 4;
    //-识别到的行人
    repeated RecPedestrian Pedestrian = 5; 
    //-识别到的非机动车
    repeated RecNonMotorVehicle NonMotorVehicles = 6;
    //-识别到的人脸
    repeated RecFace Faces = 7;
}



