// Code generated by protoc-gen-language.
// source: sensor.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SensorType int32

const (
	SensorType_Sensor_Type_Unknown          SensorType = 0
	SensorType_Sensor_Type_Face             SensorType = 1
	SensorType_Sensor_Type_Capture          SensorType = 2
	SensorType_Sensor_Type_Ipc              SensorType = 3
	SensorType_Sensor_Type_Video            SensorType = 4
	SensorType_Sensor_Type_Picture          SensorType = 5
	SensorType_Sensor_Type_Gate             SensorType = 6
	SensorType_Sensor_Type_WithID_Device    SensorType = 7
	SensorType_Sensor_Type_WithoutID_Device SensorType = 8
	SensorType_Sensor_Type_Car              SensorType = 9
	SensorType_Sensor_Type_NetPosa_PVG      SensorType = 10
	SensorType_Sensor_Type_GB28181          SensorType = 11
	SensorType_Sensor_Type_SDKHuiMu         SensorType = 12
	SensorType_Sensor_Type_SDKHaiKang       SensorType = 13
	SensorType_Sensor_Type_SDKDaHua         SensorType = 14
	SensorType_Sensor_Type_SDKHuaWei        SensorType = 15
)

var SensorType_name = map[int32]string{
	0: "Sensor_Type_Unknown",
	1: "Sensor_Type_Face",
	2: "Sensor_Type_Capture",
	3: "Sensor_Type_Ipc",
	4: "Sensor_Type_Video",
	5: "Sensor_Type_Picture",
	6: "Sensor_Type_Gate",
	7: "Sensor_Type_WithID_Device",
	8: "Sensor_Type_WithoutID_Device",
	9: "Sensor_Type_Car",
}
var SensorType_value = map[string]int32{
	"Sensor_Type_Unknown":          0,
	"Sensor_Type_Face":             1,
	"Sensor_Type_Capture":          2,
	"Sensor_Type_Ipc":              3,
	"Sensor_Type_Video":            4,
	"Sensor_Type_Picture":          5,
	"Sensor_Type_Gate":             6,
	"Sensor_Type_WithID_Device":    7,
	"Sensor_Type_WithoutID_Device": 8,
	"Sensor_Type_Car":              9,
}

func (x SensorType) String() string {
	return proto.EnumName(SensorType_name, int32(x))
}
func (SensorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

type SensorRepo struct {
	Timestamp int64      `protobuf:"varint,1,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
	RepoId    string     `protobuf:"bytes,2,opt,name=RepoId,json=repoId" json:"RepoId"`
	RepoName  string     `protobuf:"bytes,3,opt,name=RepoName,json=repoName" json:"RepoName"`
	Status    TaskStatus `protobuf:"varint,4,opt,name=Status,json=status,enum=dg.model.TaskStatus" json:"Status"`
	LevelId   int32      `protobuf:"varint,8,opt,name=LevelId,json=levelId" json:"LevelId"`
	ParentId  string     `protobuf:"bytes,9,opt,name=ParentId,json=parentId" json:"ParentId"`
	LeftId    string     `protobuf:"bytes,10,opt,name=LeftId,json=leftId" json:"LeftId"`
	RightId   string     `protobuf:"bytes,11,opt,name=RightId,json=rightId" json:"RightId"`
	Comment   string     `protobuf:"bytes,16,opt,name=Comment,json=comment" json:"Comment"`
}

func (m *SensorRepo) Reset()                    { *m = SensorRepo{} }
func (m *SensorRepo) String() string            { return proto.CompactTextString(m) }
func (*SensorRepo) ProtoMessage()               {}
func (*SensorRepo) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

func (m *SensorRepo) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SensorRepo) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *SensorRepo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *SensorRepo) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_Task_Status_Unknown
}

func (m *SensorRepo) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *SensorRepo) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *SensorRepo) GetLeftId() string {
	if m != nil {
		return m.LeftId
	}
	return ""
}

func (m *SensorRepo) GetRightId() string {
	if m != nil {
		return m.RightId
	}
	return ""
}

func (m *SensorRepo) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type Sensor struct {
	Timestamp      int64      `protobuf:"varint,1,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
	OrgId          string     `protobuf:"bytes,2,opt,name=OrgId,json=orgId" json:"OrgId"`
	OrgName        string     `protobuf:"bytes,3,opt,name=OrgName,json=orgName" json:"OrgName"`
	SensorId       string     `protobuf:"bytes,4,opt,name=SensorID,json=sensorId" json:"SensorID"`
	SensorName     string     `protobuf:"bytes,5,opt,name=SensorName,json=sensorName" json:"SensorName"`
	SerialId       string     `protobuf:"bytes,6,opt,name=SerialId,json=serialId" json:"SerialId"`
	Type           SensorType `protobuf:"varint,8,opt,name=Type,json=type,enum=dg.model.SensorType" json:"Type"`
	Status         TaskStatus `protobuf:"varint,9,opt,name=Status,json=status,enum=dg.model.TaskStatus" json:"Status"`
	Longitude      float32    `protobuf:"fixed32,18,opt,name=Longitude,json=longitude" json:"Longitude"`
	Latitude       float32    `protobuf:"fixed32,19,opt,name=Latitude,json=latitude" json:"Latitude"`
	Ip             string     `protobuf:"bytes,20,opt,name=Ip,json=ip" json:"Ip"`
	Port           string     `protobuf:"bytes,21,opt,name=Port,json=port" json:"Port"`
	Url            string     `protobuf:"bytes,22,opt,name=Url,json=url" json:"Url"`
	RenderedUrl    string     `protobuf:"bytes,23,opt,name=RenderedUrl,json=renderedUrl" json:"RenderedUrl"`
	RtmpUrl        string     `protobuf:"bytes,24,opt,name=RtmpUrl,json=rtmpUrl" json:"RtmpUrl"`
	FtpAddr        string     `protobuf:"bytes,25,opt,name=FtpAddr,json=ftpAddr" json:"FtpAddr"`
	FtpDir         string     `protobuf:"bytes,26,opt,name=FtpDir,json=ftpDir" json:"FtpDir"`
	GateIP         string     `protobuf:"bytes,27,opt,name=GateIP,json=gateIP" json:"GateIP"`
	Comment        string     `protobuf:"bytes,28,opt,name=Comment,json=comment" json:"Comment"`
	ConfigJson     string     `protobuf:"bytes,29,opt,name=ConfigJson,json=configJson" json:"ConfigJson"`
	OlympusId      string     `protobuf:"bytes,30,opt,name=OlympusId,json=olympusId" json:"OlympusId"`
	GateThreshold  float32    `protobuf:"fixed32,31,opt,name=GateThreshold,json=gateThreshold" json:"GateThreshold"`
	FtpUserName    string
	FtpPassword    string
	MserverAddr    string
	Gb28181Param   GbParam `json:"Gb28181Param,omitempty"`
	Speed          int
	TaskStatus     SupmyloStatus
	Progress       float32
	NvrAddr        string
	FlatformSensor int
}
type SupmyloStatus string

const (
	SQUEUEING SupmyloStatus = "QUEUEING"
	SRUNNING  SupmyloStatus = "RUNNING"
	SOOQ      SupmyloStatus = "OOQ"
	SRETRYING SupmyloStatus = "RETRYING"
	SSTOPPED  SupmyloStatus = "STOPPED"
	SFAILED   SupmyloStatus = "FAILED"
	SEXITED   SupmyloStatus = "EXITED"
	SDELETED  SupmyloStatus = "DELETED"
)

const (
	Flatform_Sensor_type_Unknow = iota
	Flatform_Sensor_type_Local
	Flatform_Sensor_type_Outside
)

type GbParam struct {
	ServerId     string `json:"ServerId"`
	MediaId      string `json:"MediaId"`
	LocalIp      string `json:"LocalIp"`
	LocalPort    int64  `json:"LocalPort"`
	MediaIp      string `json:"MediaIp"`
	SipIpproto   string `json:"SipIpproto"`
	MediaIpproto string `json:"MediaIpproto"`
}

func (m *Sensor) Reset()                    { *m = Sensor{} }
func (m *Sensor) String() string            { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()               {}
func (*Sensor) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{1} }

func (m *Sensor) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Sensor) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Sensor) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *Sensor) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *Sensor) GetSensorName() string {
	if m != nil {
		return m.SensorName
	}
	return ""
}

func (m *Sensor) GetSerialId() string {
	if m != nil {
		return m.SerialId
	}
	return ""
}

func (m *Sensor) GetType() SensorType {
	if m != nil {
		return m.Type
	}
	return SensorType_Sensor_Type_Unknown
}

func (m *Sensor) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_Task_Status_Unknown
}

func (m *Sensor) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Sensor) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Sensor) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Sensor) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Sensor) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Sensor) GetRenderedUrl() string {
	if m != nil {
		return m.RenderedUrl
	}
	return ""
}

func (m *Sensor) GetRtmpUrl() string {
	if m != nil {
		return m.RtmpUrl
	}
	return ""
}

func (m *Sensor) GetFtpAddr() string {
	if m != nil {
		return m.FtpAddr
	}
	return ""
}

func (m *Sensor) GetFtpDir() string {
	if m != nil {
		return m.FtpDir
	}
	return ""
}

func (m *Sensor) GetGateIP() string {
	if m != nil {
		return m.GateIP
	}
	return ""
}

func (m *Sensor) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Sensor) GetConfigJson() string {
	if m != nil {
		return m.ConfigJson
	}
	return ""
}

func (m *Sensor) GetOlympusId() string {
	if m != nil {
		return m.OlympusId
	}
	return ""
}

func (m *Sensor) GetGateThreshold() float32 {
	if m != nil {
		return m.GateThreshold
	}
	return 0
}

type SubRepoAndSensor struct {
	RepoId      string        `protobuf:"bytes,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	LevelId     int32         `protobuf:"varint,2,opt,name=LevelId,json=levelId" json:"LevelId"`
	SensorRepos []*SensorRepo `protobuf:"bytes,3,rep,name=SensorRepos,json=sensorRepos" json:"SensorRepos"`
	Sensors     []*Sensor     `protobuf:"bytes,4,rep,name=Sensors,json=sensors" json:"Sensors"`
}

func (m *SubRepoAndSensor) Reset()                    { *m = SubRepoAndSensor{} }
func (m *SubRepoAndSensor) String() string            { return proto.CompactTextString(m) }
func (*SubRepoAndSensor) ProtoMessage()               {}
func (*SubRepoAndSensor) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{2} }

func (m *SubRepoAndSensor) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *SubRepoAndSensor) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *SubRepoAndSensor) GetSensorRepos() []*SensorRepo {
	if m != nil {
		return m.SensorRepos
	}
	return nil
}

func (m *SubRepoAndSensor) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type SensorRepoResult struct {
	AllSize      int32         `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize int32         `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	SensorRepos  []*SensorRepo `protobuf:"bytes,3,rep,name=SensorRepos,json=sensorRepos" json:"SensorRepos"`
}

func (m *SensorRepoResult) Reset()                    { *m = SensorRepoResult{} }
func (m *SensorRepoResult) String() string            { return proto.CompactTextString(m) }
func (*SensorRepoResult) ProtoMessage()               {}
func (*SensorRepoResult) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{3} }

func (m *SensorRepoResult) GetAllSize() int32 {
	if m != nil {
		return m.AllSize
	}
	return 0
}

func (m *SensorRepoResult) GetReturnedSize() int32 {
	if m != nil {
		return m.ReturnedSize
	}
	return 0
}

func (m *SensorRepoResult) GetSensorRepos() []*SensorRepo {
	if m != nil {
		return m.SensorRepos
	}
	return nil
}

type SensorResult struct {
	AllSize      int32     `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize int32     `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	Sensors      []*Sensor `protobuf:"bytes,3,rep,name=Sensors,json=sensors" json:"Sensors"`
}

func (m *SensorResult) Reset()                    { *m = SensorResult{} }
func (m *SensorResult) String() string            { return proto.CompactTextString(m) }
func (*SensorResult) ProtoMessage()               {}
func (*SensorResult) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{4} }

func (m *SensorResult) GetAllSize() int32 {
	if m != nil {
		return m.AllSize
	}
	return 0
}

func (m *SensorResult) GetReturnedSize() int32 {
	if m != nil {
		return m.ReturnedSize
	}
	return 0
}

func (m *SensorResult) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type RepoSensorId struct {
	RepoId   int32 `protobuf:"varint,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorId int32 `protobuf:"varint,2,opt,name=SensorID,json=sensorId" json:"SensorID"`
}

func (m *RepoSensorId) Reset()                    { *m = RepoSensorId{} }
func (m *RepoSensorId) String() string            { return proto.CompactTextString(m) }
func (*RepoSensorId) ProtoMessage()               {}
func (*RepoSensorId) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{5} }

func (m *RepoSensorId) GetRepoId() int32 {
	if m != nil {
		return m.RepoId
	}
	return 0
}

func (m *RepoSensorId) GetSensorId() int32 {
	if m != nil {
		return m.SensorId
	}
	return 0
}

type RepoSensorName struct {
	RepoName   string `protobuf:"bytes,1,opt,name=RepoName,json=repoName" json:"RepoName"`
	SensorName string `protobuf:"bytes,2,opt,name=SensorName,json=sensorName" json:"SensorName"`
}

func (m *RepoSensorName) Reset()                    { *m = RepoSensorName{} }
func (m *RepoSensorName) String() string            { return proto.CompactTextString(m) }
func (*RepoSensorName) ProtoMessage()               {}
func (*RepoSensorName) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{6} }

func (m *RepoSensorName) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *RepoSensorName) GetSensorName() string {
	if m != nil {
		return m.SensorName
	}
	return ""
}

func init() {
	proto.RegisterType((*SensorRepo)(nil), "dg.model.SensorRepo")
	proto.RegisterType((*Sensor)(nil), "dg.model.Sensor")
	proto.RegisterType((*SubRepoAndSensor)(nil), "dg.model.SubRepoAndSensor")
	proto.RegisterType((*SensorRepoResult)(nil), "dg.model.SensorRepoResult")
	proto.RegisterType((*SensorResult)(nil), "dg.model.SensorResult")
	proto.RegisterType((*RepoSensorId)(nil), "dg.model.RepoSensorId")
	proto.RegisterType((*RepoSensorName)(nil), "dg.model.RepoSensorName")
	proto.RegisterEnum("dg.model.SensorType", SensorType_name, SensorType_value)
}

func init() { proto.RegisterFile("sensor.proto", fileDescriptor19) }

var fileDescriptor19 = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x7d, 0x71, 0x9c, 0x0f, 0x4f, 0x02, 0xcf, 0x6f, 0xf8, 0x1a, 0x78, 0x40, 0x51, 0xd4, 0x05,
	0x42, 0x55, 0x16, 0xad, 0xd4, 0x3d, 0x0d, 0xa2, 0x4a, 0x15, 0x95, 0xc8, 0x09, 0xed, 0x12, 0x99,
	0x78, 0x92, 0x58, 0xd8, 0x1e, 0x6b, 0x66, 0x4c, 0x4b, 0xf7, 0x95, 0xba, 0xea, 0xef, 0xe8, 0x6f,
	0xec, 0xaa, 0x73, 0x67, 0xe2, 0xc4, 0x31, 0x0b, 0xaa, 0xaa, 0x1b, 0xe0, 0x9c, 0x33, 0xf7, 0xce,
	0xf1, 0xbd, 0x73, 0x2f, 0xa8, 0x2d, 0x68, 0x22, 0x18, 0xef, 0xa6, 0x9c, 0x49, 0x86, 0x9b, 0xc1,
	0xac, 0x1b, 0xb3, 0x80, 0x46, 0x07, 0x58, 0x50, 0x9f, 0x4f, 0xe6, 0x13, 0x16, 0xc7, 0x2c, 0x31,
	0x6a, 0xe7, 0xbb, 0x85, 0xd0, 0x48, 0x1f, 0xf7, 0x68, 0xca, 0xf0, 0x21, 0x72, 0xc6, 0x61, 0x4c,
	0x85, 0xf4, 0xe3, 0x94, 0x54, 0x4e, 0x2a, 0xa7, 0x55, 0xcf, 0x91, 0x39, 0x81, 0x77, 0x51, 0x1d,
	0x4e, 0xf5, 0x03, 0x62, 0x29, 0xc9, 0xf1, 0xea, 0x5c, 0x23, 0x7c, 0x80, 0x9a, 0xc0, 0xbf, 0xf7,
	0x63, 0x4a, 0xaa, 0x5a, 0x69, 0xf2, 0x05, 0xc6, 0x2f, 0x50, 0x7d, 0x24, 0x7d, 0x99, 0x09, 0x62,
	0x2b, 0x65, 0xf3, 0xe5, 0x76, 0x37, 0xf7, 0xd3, 0x1d, 0xfb, 0xe2, 0xce, 0x68, 0x5e, 0x5d, 0xe8,
	0xdf, 0x98, 0xa0, 0xc6, 0x80, 0xde, 0xd3, 0x48, 0x5d, 0xd1, 0x54, 0xc7, 0x6b, 0x5e, 0x23, 0x32,
	0x10, 0xee, 0x18, 0xfa, 0x9c, 0x26, 0x52, 0x49, 0x8e, 0xb9, 0x23, 0x5d, 0x60, 0xf0, 0x35, 0xa0,
	0x53, 0x50, 0x90, 0xf1, 0x15, 0x69, 0x04, 0xd9, 0xbc, 0x70, 0x36, 0x07, 0xa1, 0xa5, 0x85, 0x06,
	0x37, 0x10, 0x94, 0x9e, 0x2a, 0x83, 0x0a, 0x27, 0xae, 0x51, 0x26, 0x06, 0x76, 0x7e, 0xda, 0xca,
	0xb0, 0x2e, 0xc8, 0x13, 0xc5, 0xd8, 0x46, 0xb5, 0x2b, 0x3e, 0x5b, 0xd6, 0xa2, 0xc6, 0x00, 0x40,
	0x62, 0xc5, 0x16, 0x2a, 0xd1, 0x60, 0x06, 0xc2, 0x07, 0x98, 0xbc, 0x2a, 0xc4, 0x36, 0x1f, 0x20,
	0x16, 0x18, 0x1f, 0xe7, 0x4d, 0xd0, 0x81, 0x35, 0xad, 0x22, 0xb1, 0x64, 0x4c, 0x2c, 0x0f, 0x7d,
	0xa8, 0x4b, 0x3d, 0x8f, 0x35, 0x18, 0x9f, 0x22, 0x7b, 0xfc, 0x90, 0x52, 0x5d, 0xaf, 0xb5, 0xf2,
	0x9a, 0x8c, 0xa0, 0x79, 0xb6, 0x54, 0x3f, 0x0b, 0xad, 0x70, 0x7e, 0xa3, 0x15, 0xea, 0xeb, 0x07,
	0x2c, 0x99, 0x85, 0x32, 0x0b, 0x28, 0xc1, 0x2a, 0xc0, 0xf2, 0x9c, 0x28, 0x27, 0xc0, 0xd1, 0xc0,
	0x97, 0x46, 0xdc, 0xd2, 0x62, 0x33, 0x5a, 0x60, 0xbc, 0x89, 0xac, 0x7e, 0x4a, 0xb6, 0xb5, 0x4f,
	0x2b, 0x4c, 0x31, 0x46, 0xf6, 0x90, 0x71, 0x49, 0x76, 0x34, 0x63, 0xa7, 0xea, 0x6f, 0xec, 0xa2,
	0xea, 0x35, 0x8f, 0xc8, 0xae, 0xa6, 0xaa, 0x19, 0x8f, 0xf0, 0x09, 0x6a, 0x79, 0x34, 0x09, 0x28,
	0xa7, 0x01, 0x28, 0x7b, 0x5a, 0x69, 0xf1, 0x15, 0xa5, 0xdb, 0x29, 0xe3, 0x14, 0x54, 0xb2, 0x68,
	0xa7, 0x81, 0xa0, 0x5c, 0xca, 0xf4, 0x3c, 0x08, 0x38, 0xd9, 0x37, 0xca, 0xd4, 0x40, 0x78, 0x1a,
	0x4a, 0xb9, 0x08, 0x39, 0x39, 0x30, 0x4f, 0x63, 0xaa, 0x11, 0xf0, 0x6f, 0x7d, 0x49, 0xfb, 0x43,
	0xf2, 0xbf, 0xe1, 0x67, 0x1a, 0x15, 0x1f, 0xc6, 0xe1, 0xda, 0xc3, 0x80, 0x1e, 0xf5, 0x58, 0x32,
	0x0d, 0x67, 0xef, 0x04, 0x4b, 0xc8, 0x91, 0xe9, 0xd1, 0x64, 0xc9, 0x40, 0xbd, 0xae, 0xa2, 0x87,
	0x38, 0xcd, 0x84, 0x6a, 0xd2, 0xb1, 0x96, 0x1d, 0x96, 0x13, 0xf8, 0x39, 0xda, 0x80, 0xfb, 0xc6,
	0x73, 0x4e, 0xc5, 0x9c, 0x45, 0x01, 0x79, 0xa6, 0x8b, 0xb6, 0x31, 0x2b, 0x92, 0x9d, 0x1f, 0x15,
	0xe4, 0x8e, 0xb2, 0x5b, 0x18, 0xa6, 0xf3, 0x24, 0x58, 0x3c, 0xc3, 0xd5, 0xd4, 0x55, 0xd6, 0xa6,
	0xae, 0x30, 0x2b, 0xd6, 0xfa, 0xac, 0xbc, 0x46, 0xad, 0xd5, 0x4c, 0x0b, 0xf5, 0x10, 0xab, 0xa7,
	0xad, 0xc7, 0x2f, 0x03, 0x44, 0xaf, 0x25, 0x56, 0x07, 0xf1, 0x19, 0x6a, 0x18, 0x09, 0x86, 0x15,
	0x62, 0xdc, 0x47, 0x31, 0x0d, 0x73, 0x5e, 0x74, 0xbe, 0x81, 0xd5, 0x55, 0x1e, 0x2a, 0xb2, 0x48,
	0x82, 0xa5, 0xf3, 0x28, 0x1a, 0x85, 0x5f, 0xa8, 0xf6, 0xaa, 0x2c, 0xf9, 0x06, 0xe2, 0x0e, 0x6a,
	0x7b, 0x54, 0x66, 0x3c, 0xa1, 0x81, 0x96, 0x8d, 0xe3, 0x36, 0x2f, 0x70, 0x7f, 0x6a, 0xbb, 0xf3,
	0x19, 0xb5, 0x73, 0xe9, 0x2f, 0xb8, 0x28, 0x14, 0xa1, 0xfa, 0x54, 0x11, 0xde, 0x40, 0xbe, 0x94,
	0xe5, 0x73, 0x5d, 0x6a, 0x55, 0xad, 0xb8, 0x20, 0x97, 0xb3, 0x6f, 0xee, 0x5c, 0xce, 0x7e, 0x67,
	0x80, 0x36, 0x57, 0x39, 0xf2, 0x69, 0x5f, 0xae, 0xd3, 0x4a, 0x69, 0x9d, 0xae, 0x6f, 0x0a, 0xab,
	0xbc, 0x29, 0xce, 0xbe, 0x2e, 0xf7, 0x39, 0x0c, 0x3e, 0xde, 0x43, 0x5b, 0x06, 0xdd, 0x00, 0xbc,
	0xb9, 0x4e, 0xee, 0x12, 0xf6, 0x29, 0x71, 0xff, 0x51, 0xdb, 0xcb, 0x2d, 0x0a, 0x97, 0xfe, 0x84,
	0xba, 0x95, 0xf2, 0xf1, 0x9e, 0x9f, 0xaa, 0xc2, 0x50, 0xd7, 0xc2, 0x5b, 0xe8, 0xdf, 0xa2, 0xd0,
	0x4f, 0x27, 0x6e, 0x15, 0xef, 0xa0, 0xff, 0x8a, 0xe4, 0x87, 0x30, 0xa0, 0xcc, 0xb5, 0xcb, 0x49,
	0x86, 0xe1, 0x44, 0x27, 0xa9, 0x95, 0xef, 0x84, 0x79, 0x70, 0xeb, 0xf8, 0x08, 0xed, 0x17, 0xd9,
	0x8f, 0xa1, 0x9c, 0xf7, 0x2f, 0x6e, 0x2e, 0xe8, 0x7d, 0xa8, 0x2c, 0x35, 0xd4, 0x5a, 0x38, 0x2c,
	0xcb, 0x2c, 0x93, 0xab, 0x13, 0xcd, 0xb2, 0xb7, 0x9e, 0xcf, 0x5d, 0xe7, 0xb6, 0xae, 0xff, 0xbd,
	0xbd, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0x74, 0x8b, 0xaf, 0xb2, 0x0c, 0x07, 0x00, 0x00,
}
