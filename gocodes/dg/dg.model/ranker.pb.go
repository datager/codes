// Code generated by protoc-gen-language.
// source: ranker.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FeatureDataType int32

const (
	FeatureDataType_FEATURE_DATA_TYPE_FLOAT FeatureDataType = 0
	FeatureDataType_FEATURE_DATA_TYPE_SHORT FeatureDataType = 1
)

var FeatureDataType_name = map[int32]string{
	0: "FEATURE_DATA_TYPE_FLOAT",
	1: "FEATURE_DATA_TYPE_SHORT",
}
var FeatureDataType_value = map[string]int32{
	"FEATURE_DATA_TYPE_FLOAT": 0,
	"FEATURE_DATA_TYPE_SHORT": 1,
}

func (x FeatureDataType) String() string {
	return proto.EnumName(FeatureDataType_name, int32(x))
}
func (FeatureDataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

// -库操作类型, 分为增加, 删除, 更新和查找
type RepoOperation int32

const (
	// -默认操作, 不可用
	RepoOperation_REPO_OPERATION_DEFAULT RepoOperation = 0
	// -增加一个新的库, 调用者需要保证库ID唯一
	RepoOperation_REPO_OPERATION_ADD RepoOperation = 1
	// -删除一个已存在的库
	RepoOperation_REPO_OPERATION_DELETE RepoOperation = 2
	// -更新一个已存在的库
	RepoOperation_REPO_OPERATION_UPDATE RepoOperation = 3
	// -查找一个或多个已存在的库
	RepoOperation_REPO_OPERATION_QUERY RepoOperation = 4
)

var RepoOperation_name = map[int32]string{
	0: "REPO_OPERATION_DEFAULT",
	1: "REPO_OPERATION_ADD",
	2: "REPO_OPERATION_DELETE",
	3: "REPO_OPERATION_UPDATE",
	4: "REPO_OPERATION_QUERY",
}
var RepoOperation_value = map[string]int32{
	"REPO_OPERATION_DEFAULT": 0,
	"REPO_OPERATION_ADD":     1,
	"REPO_OPERATION_DELETE":  2,
	"REPO_OPERATION_UPDATE":  3,
	"REPO_OPERATION_QUERY":   4,
}

func (x RepoOperation) String() string {
	return proto.EnumName(RepoOperation_name, int32(x))
}
func (RepoOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

// -特征操作类型, 分为增加, 删除, 更新和查找
type ObjectOperation int32

const (
	// -默认操作, 不可用
	ObjectOperation_OBJECT_OPERATION_DEFAULT ObjectOperation = 0
	// -增加一个新特征, 调用者需要保证特征ID唯一
	ObjectOperation_OBJECT_OPERATION_ADD ObjectOperation = 1
	// -删除一个已存在的特征
	ObjectOperation_OBJECT_OPERATION_DELETE ObjectOperation = 2
	// -更新一个已存在的特征
	ObjectOperation_OBJECT_OPERATION_UPDATE ObjectOperation = 3
	// -查询一个或多个已存在的特征
	ObjectOperation_OBJECT_OPERATION_QUERY ObjectOperation = 4
)

var ObjectOperation_name = map[int32]string{
	0: "OBJECT_OPERATION_DEFAULT",
	1: "OBJECT_OPERATION_ADD",
	2: "OBJECT_OPERATION_DELETE",
	3: "OBJECT_OPERATION_UPDATE",
	4: "OBJECT_OPERATION_QUERY",
}
var ObjectOperation_value = map[string]int32{
	"OBJECT_OPERATION_DEFAULT": 0,
	"OBJECT_OPERATION_ADD":     1,
	"OBJECT_OPERATION_DELETE":  2,
	"OBJECT_OPERATION_UPDATE":  3,
	"OBJECT_OPERATION_QUERY":   4,
}

func (x ObjectOperation) String() string {
	return proto.EnumName(ObjectOperation_name, int32(x))
}
func (ObjectOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

// -库的级别
type RepoLevel int32

const (
	RepoLevel_REPO_LEVEL_NOT_USED RepoLevel = 0
	// -数据主要存储在磁盘上, 在计算过程中会发生磁盘-内存间交换. 支持十亿级别的数据.
	RepoLevel_REPO_LEVEL_ON_STORAGE RepoLevel = 1
	// -未实现. 数组存储在内存上
	RepoLevel_REPO_LEVEL_ON_RAM RepoLevel = 2
	// -数据存储在GPU显存上, 在计算过程中直接使用, 不需要发生IO操作
	RepoLevel_REPO_LEVEL_ON_GPU RepoLevel = 3
	// -未实现. 数据部分在内存, 部分在磁盘
	RepoLevel_REPO_LEVEL_ON_RAM_STORAGE RepoLevel = 4
	// -未实现. 数据部分在显存, 部分在磁盘
	RepoLevel_REPO_LEVEL_ON_GPU_STORAGE RepoLevel = 5
	// -未实现. 数据部分在内存, 部分在显存
	RepoLevel_REPO_LEVEL_ON_RAM_GPU RepoLevel = 6
	// -未实现. 数据部分在内存, 部分在显存, 部分在磁盘
	RepoLevel_REPO_LEVEL_ON_RAM_GPU_STORAGE RepoLevel = 7
)

var RepoLevel_name = map[int32]string{
	0: "REPO_LEVEL_NOT_USED",
	1: "REPO_LEVEL_ON_STORAGE",
	2: "REPO_LEVEL_ON_RAM",
	3: "REPO_LEVEL_ON_GPU",
	4: "REPO_LEVEL_ON_RAM_STORAGE",
	5: "REPO_LEVEL_ON_GPU_STORAGE",
	6: "REPO_LEVEL_ON_RAM_GPU",
	7: "REPO_LEVEL_ON_RAM_GPU_STORAGE",
}
var RepoLevel_value = map[string]int32{
	"REPO_LEVEL_NOT_USED":           0,
	"REPO_LEVEL_ON_STORAGE":         1,
	"REPO_LEVEL_ON_RAM":             2,
	"REPO_LEVEL_ON_GPU":             3,
	"REPO_LEVEL_ON_RAM_STORAGE":     4,
	"REPO_LEVEL_ON_GPU_STORAGE":     5,
	"REPO_LEVEL_ON_RAM_GPU":         6,
	"REPO_LEVEL_ON_RAM_GPU_STORAGE": 7,
}

func (x RepoLevel) String() string {
	return proto.EnumName(RepoLevel_name, int32(x))
}
func (RepoLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

// -请求上下文
type RankRequestContext struct {
	// -请求Session, 调用者填写,会在返回时携带,用于唯一标示一次请求. 可为空
	SessionId string `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId"`
	// -用户名信息，需要开启权限验证功能. 可为空
	UserName string `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName"`
	// -Token信息，需要开启权限验证功能. 可为空
	Token string `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token"`
	// -扩展参数
	Params map[string]string `protobuf:"bytes,5,rep,name=Params,json=params" json:"Params" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// deprecated. 旧版本参数, 不再使用
	Type RankType `protobuf:"varint,4,opt,name=Type,json=type,enum=dg.model.RankType" json:"Type"`
}

func (m *RankRequestContext) Reset()                    { *m = RankRequestContext{} }
func (m *RankRequestContext) String() string            { return proto.CompactTextString(m) }
func (*RankRequestContext) ProtoMessage()               {}
func (*RankRequestContext) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *RankRequestContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RankRequestContext) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RankRequestContext) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RankRequestContext) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RankRequestContext) GetType() RankType {
	if m != nil {
		return m.Type
	}
	return RankType_RANK_TYPE_DEFAULT
}

// -返回上下文
type RankResponseContext struct {
	// -响应Session，如果请求Session不存在，生成UUID，否则复制请求的Session
	SessionId string `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId"`
	// -响应状态信息
	Status string `protobuf:"bytes,2,opt,name=Status,json=status" json:"Status"`
	// -状态为错误的响应错误信息
	Message string `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message"`
	// -请求下发给Engine的时间
	RequestTs *Time `protobuf:"bytes,4,opt,name=RequestTs,json=requestTs" json:"RequestTs"`
	// -从Engine读取内容的时间
	ResponseTs *Time `protobuf:"bytes,5,opt,name=ResponseTs,json=responseTs" json:"ResponseTs"`
	// -Debug用时
	DebugTs map[string]*Time `protobuf:"bytes,6,rep,name=DebugTs,json=debugTs" json:"DebugTs" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankResponseContext) Reset()                    { *m = RankResponseContext{} }
func (m *RankResponseContext) String() string            { return proto.CompactTextString(m) }
func (*RankResponseContext) ProtoMessage()               {}
func (*RankResponseContext) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *RankResponseContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RankResponseContext) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RankResponseContext) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RankResponseContext) GetRequestTs() *Time {
	if m != nil {
		return m.RequestTs
	}
	return nil
}

func (m *RankResponseContext) GetResponseTs() *Time {
	if m != nil {
		return m.ResponseTs
	}
	return nil
}

func (m *RankResponseContext) GetDebugTs() map[string]*Time {
	if m != nil {
		return m.DebugTs
	}
	return nil
}

// -特征比对服务请求
type RankFeatureRequest struct {
	// -请求上下文
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -待比对的特征信息
	ObjectFeature *ObjectProperty `protobuf:"bytes,3,opt,name=ObjectFeature,json=objectFeature" json:"ObjectFeature"`
	// -候选特征列表. 默认为空表示1:N比对, 不为空进行1:1或1:n比对
	ObjectCandidates []*ObjectProperty `protobuf:"bytes,4,rep,name=ObjectCandidates,json=objectCandidates" json:"ObjectCandidates"`
	// -比对参数列表, 可选值如下
	// -ScoreThreshold, 数据类型为float, 指定比对分数的最小阈值, 小于该值不返回, 默认为0表示不过滤
	// -MaxCandidates 数据类型为int, 指定返回Top K
	// -PageSize 数据类型为int, 分页返回值, 指定每页大小. 默认为0表示不分页
	// -PageIndex 数据类型为int, 分页页数
	// -Normalization. 数据类型为bool, 指定是否需要对分数计算结果进行归一化处理. 默认为false
	// -ShowAttributes. 数据类型为bool, 指定是否返回比对结果的详细属性,比如时间,地点等信息. 默认为false
	// -FilterABC. 数据类型为int, 并可使用逗号分割传入多个值表示一个集合. 用于动态属性过滤, FliterABC表示过滤自定义的ABC属性, ABC属性值在传入的集合中
	// -RangeXYZ. 数据类型为int-int, 表示一个值的范围. 用于动态属性过滤, FliterXYZ表示过滤自定义的XYZ属性, 属性值在传入的范围之间.
	// -RepoId 必需. 数据类型为int, 指定在哪个库中进行比对.
	// -Locations 必需. 数据类型为int, 并可使用逗号分割传入多个值. 比如"[1,2,3]"表示只在地点是1,2,3的特征中进行比对
	// -StartTime 必需. 数据类型为int64.// -StartTime 必需. 数据类型为int64.
	// -EndTime 必需. 数据类型为int64, 与StartTime配合使用,指定被特征的时间范围.
	Params map[string]string `protobuf:"bytes,6,rep,name=Params,json=params" json:"Params" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// deprecated. 旧参数, 不再使用
	MaxCandidates int32 `protobuf:"varint,5,opt,name=MaxCandidates,json=maxCandidates" json:"MaxCandidates"`
	// deprecated, 旧参数, 不再使用
	Feature *FeatureVector `protobuf:"bytes,2,opt,name=Feature,json=feature" json:"Feature"`
}

func (m *RankFeatureRequest) Reset()                    { *m = RankFeatureRequest{} }
func (m *RankFeatureRequest) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureRequest) ProtoMessage()               {}
func (*RankFeatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *RankFeatureRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureRequest) GetObjectFeature() *ObjectProperty {
	if m != nil {
		return m.ObjectFeature
	}
	return nil
}

func (m *RankFeatureRequest) GetObjectCandidates() []*ObjectProperty {
	if m != nil {
		return m.ObjectCandidates
	}
	return nil
}

func (m *RankFeatureRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RankFeatureRequest) GetMaxCandidates() int32 {
	if m != nil {
		return m.MaxCandidates
	}
	return 0
}

func (m *RankFeatureRequest) GetFeature() *FeatureVector {
	if m != nil {
		return m.Feature
	}
	return nil
}

// -特征比对服务返回
type RankFeatureResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -比对结果列表
	Candidates []*RankItem `protobuf:"bytes,2,rep,name=Candidates,json=candidates" json:"Candidates"`
}

func (m *RankFeatureResponse) Reset()                    { *m = RankFeatureResponse{} }
func (m *RankFeatureResponse) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureResponse) ProtoMessage()               {}
func (*RankFeatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *RankFeatureResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureResponse) GetCandidates() []*RankItem {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// -库操作服务请求
type RankRepoOpRequest struct {
	// -请求上下文信息
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -库操作请求信息
	Repo *RankRepoOperation `protobuf:"bytes,2,opt,name=Repo,json=repo" json:"Repo"`
}

func (m *RankRepoOpRequest) Reset()                    { *m = RankRepoOpRequest{} }
func (m *RankRepoOpRequest) String() string            { return proto.CompactTextString(m) }
func (*RankRepoOpRequest) ProtoMessage()               {}
func (*RankRepoOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *RankRepoOpRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankRepoOpRequest) GetRepo() *RankRepoOperation {
	if m != nil {
		return m.Repo
	}
	return nil
}

// -库操作服务返回
type RankRepoOpResponse struct {
	// -返回上下文信息
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -库操作返回信息
	Repos []*RankRepoOperation `protobuf:"bytes,2,rep,name=Repos,json=repos" json:"Repos"`
}

func (m *RankRepoOpResponse) Reset()                    { *m = RankRepoOpResponse{} }
func (m *RankRepoOpResponse) String() string            { return proto.CompactTextString(m) }
func (*RankRepoOpResponse) ProtoMessage()               {}
func (*RankRepoOpResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *RankRepoOpResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankRepoOpResponse) GetRepos() []*RankRepoOperation {
	if m != nil {
		return m.Repos
	}
	return nil
}

// -特征操作请求
type RankFeatureOpRequest struct {
	// -请求上下文
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -请求详细信息
	Features *RankFeatureOperation `protobuf:"bytes,2,opt,name=Features,json=features" json:"Features"`
}

func (m *RankFeatureOpRequest) Reset()                    { *m = RankFeatureOpRequest{} }
func (m *RankFeatureOpRequest) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureOpRequest) ProtoMessage()               {}
func (*RankFeatureOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

func (m *RankFeatureOpRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureOpRequest) GetFeatures() *RankFeatureOperation {
	if m != nil {
		return m.Features
	}
	return nil
}

// -特征操作返回
type RankFeatureOpResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -返回详细信息
	Features *RankFeatureOperation `protobuf:"bytes,2,opt,name=Features,json=features" json:"Features"`
}

func (m *RankFeatureOpResponse) Reset()                    { *m = RankFeatureOpResponse{} }
func (m *RankFeatureOpResponse) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureOpResponse) ProtoMessage()               {}
func (*RankFeatureOpResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *RankFeatureOpResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureOpResponse) GetFeatures() *RankFeatureOperation {
	if m != nil {
		return m.Features
	}
	return nil
}

// -特征操作请求信息
type RankFeatureOperation struct {
	// -待操作特征所属于的库ID, 增加特征时必需.
	RepoId string `protobuf:"bytes,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	// -操作类型, 增加, 删除, 更新或者查询
	Operation ObjectOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=dg.model.ObjectOperation" json:"Operation"`
	// -特征列表. 可同时增加, 删除, 更新或者查询多条特征.
	ObjectFeatures []*ObjectProperty `protobuf:"bytes,3,rep,name=ObjectFeatures,json=objectFeatures" json:"ObjectFeatures"`
	// -可选参数. 暂时未使用
	Params map[string]string `protobuf:"bytes,4,rep,name=Params,json=params" json:"Params" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankFeatureOperation) Reset()                    { *m = RankFeatureOperation{} }
func (m *RankFeatureOperation) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureOperation) ProtoMessage()               {}
func (*RankFeatureOperation) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *RankFeatureOperation) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *RankFeatureOperation) GetOperation() ObjectOperation {
	if m != nil {
		return m.Operation
	}
	return ObjectOperation_OBJECT_OPERATION_DEFAULT
}

func (m *RankFeatureOperation) GetObjectFeatures() []*ObjectProperty {
	if m != nil {
		return m.ObjectFeatures
	}
	return nil
}

func (m *RankFeatureOperation) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

// -特征操作具体信息
type RankRepoOperation struct {
	// -库ID, 必需. 增加库时需要保证唯一,否则返回错误. 其他操作需保证库ID存在, 否则返回错误
	RepoId string `protobuf:"bytes,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	// -具体操作内容. 包括增加, 删除, 修改和查找
	Operation RepoOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=dg.model.RepoOperation" json:"Operation"`
	// -库级别. 在增加库和修改时必需, 其他操作不需要
	Level RepoLevel `protobuf:"varint,3,opt,name=Level,json=level,enum=dg.model.RepoLevel" json:"Level"`
	// -特征长度. 在增加库时必需且不可更新. 其他操作不需要
	FeatureLen int32 `protobuf:"varint,4,opt,name=FeatureLen,json=featureLen" json:"FeatureLen"`
	// -特征的数据类型, 目前包括float和short两种. 在增加库时必须且不可更新. 其他操作不需要.
	FeatureDataType FeatureDataType `protobuf:"varint,5,opt,name=FeatureDataType,json=featureDataType,enum=dg.model.FeatureDataType" json:"FeatureDataType"`
	// -库容量. 如果库级别定义为REPO_LEVEL_ON_GPU, 在增加库时必需, 表明库的最大容量. 其他级别和操作时不需要.
	Capacity int32 `protobuf:"varint,6,opt,name=Capacity,json=capacity" json:"Capacity"`
	// -库当前大小, 仅在查询时作为返回值使用
	Size int32 `protobuf:"varint,7,opt,name=Size,json=size" json:"Size"`
	// -可选参数. 目前可用参数包括:
	// -DynamicLoadNumber, 合法的数字型. 在库级别定义为REPO_LEVEL_ON_GPU时有效. 表明在启动时,按照数据新旧,最多加载到显存中的数据量
	// -GPUThreads, [1,1,0,1]字符串格式. 在库级别定义为REPO_LEVEL_ON_GPU时必需. 表明数据在多个GPU上的分布. [1,1,0,1]表示当前服务器有三个GPU卡, 但是数据被平均存储在0,1和3号GPU卡上.
	Params map[string]string `protobuf:"bytes,8,rep,name=Params,json=params" json:"Params" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankRepoOperation) Reset()                    { *m = RankRepoOperation{} }
func (m *RankRepoOperation) String() string            { return proto.CompactTextString(m) }
func (*RankRepoOperation) ProtoMessage()               {}
func (*RankRepoOperation) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

func (m *RankRepoOperation) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *RankRepoOperation) GetOperation() RepoOperation {
	if m != nil {
		return m.Operation
	}
	return RepoOperation_REPO_OPERATION_DEFAULT
}

func (m *RankRepoOperation) GetLevel() RepoLevel {
	if m != nil {
		return m.Level
	}
	return RepoLevel_REPO_LEVEL_NOT_USED
}

func (m *RankRepoOperation) GetFeatureLen() int32 {
	if m != nil {
		return m.FeatureLen
	}
	return 0
}

func (m *RankRepoOperation) GetFeatureDataType() FeatureDataType {
	if m != nil {
		return m.FeatureDataType
	}
	return FeatureDataType_FEATURE_DATA_TYPE_FLOAT
}

func (m *RankRepoOperation) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *RankRepoOperation) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RankRepoOperation) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

// -比对结果项
type RankItem struct {
	// -特征Id
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
	// -比对分数
	Score float32 `protobuf:"fixed32,2,opt,name=Score,json=score" json:"Score"`
	// -特征所在库Id, 默认不返回
	RepoId string `protobuf:"bytes,7,opt,name=RepoId,json=repoId" json:"RepoId"`
	// -特征地点信息, 默认不返回
	Location string `protobuf:"bytes,8,opt,name=Location,json=location" json:"Location"`
	// -特征时间信息, 默认不返回
	Time int64 `protobuf:"varint,9,opt,name=Time,json=time" json:"Time"`
	// -特征其他属性, 默认不返回
	Attributes map[string]int32 `protobuf:"bytes,6,rep,name=Attributes,json=attributes" json:"Attributes" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// deprecated. 旧版本, 不再使用
	Name string `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name"`
	// deprecated. 旧版本, 不再使用
	URI string `protobuf:"bytes,4,opt,name=URI,json=uRI" json:"URI"`
	// deprecated. 旧版本, 不再使用
	Data string `protobuf:"bytes,5,opt,name=Data,json=data" json:"Data"`
}

func (m *RankItem) Reset()                    { *m = RankItem{} }
func (m *RankItem) String() string            { return proto.CompactTextString(m) }
func (*RankItem) ProtoMessage()               {}
func (*RankItem) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *RankItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RankItem) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RankItem) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *RankItem) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *RankItem) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RankItem) GetAttributes() map[string]int32 {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RankItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RankItem) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *RankItem) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// -增加特征服务请求
type AddFeaturesRequest struct {
	// -请求上下文
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -待增加特征信息
	ObjectFeatures []*ObjectProperty `protobuf:"bytes,2,rep,name=ObjectFeatures,json=objectFeatures" json:"ObjectFeatures"`
}

func (m *AddFeaturesRequest) Reset()                    { *m = AddFeaturesRequest{} }
func (m *AddFeaturesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFeaturesRequest) ProtoMessage()               {}
func (*AddFeaturesRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{11} }

func (m *AddFeaturesRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AddFeaturesRequest) GetObjectFeatures() []*ObjectProperty {
	if m != nil {
		return m.ObjectFeatures
	}
	return nil
}

// -增加特征服务返回
type AddFeaturesResponse struct {
	// -返回上下文
	Context        *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	ObjectFeatures []*ObjectProperty    `protobuf:"bytes,2,rep,name=ObjectFeatures,json=objectFeatures" json:"ObjectFeatures"`
}

func (m *AddFeaturesResponse) Reset()                    { *m = AddFeaturesResponse{} }
func (m *AddFeaturesResponse) String() string            { return proto.CompactTextString(m) }
func (*AddFeaturesResponse) ProtoMessage()               {}
func (*AddFeaturesResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{12} }

func (m *AddFeaturesResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AddFeaturesResponse) GetObjectFeatures() []*ObjectProperty {
	if m != nil {
		return m.ObjectFeatures
	}
	return nil
}

// -特征属性
type ObjectProperty struct {
	// -特征ID, 唯一标示一个特征, 必需.
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
	// -地点, 表示特征的地点信息. 在增加时必需. 更新时可选用于指定新值.
	Location string `protobuf:"bytes,4,opt,name=Location,json=location" json:"Location"`
	// -时间, 表示特征的时间信息. 在增加时必需. 更新时可选用于指定新值.
	Time int64 `protobuf:"varint,5,opt,name=Time,json=time" json:"Time"`
	// -特征的BASE64表示. 在增加时必需. 更新时可选用于指定新值.
	Feature string `protobuf:"bytes,7,opt,name=Feature,json=feature" json:"Feature"`
	// -特征的其他可选属性. Key为string类型, value为int32类型. Key如果不存在会自动创建. Key的总数量小于2^32
	Attributes map[string]int32 `protobuf:"bytes,9,rep,name=Attributes,json=attributes" json:"Attributes" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// 以下字段为保证兼容而保留,不再使用
	// Decrepcated
	Type int32 `protobuf:"varint,2,opt,name=Type,json=type" json:"Type"`
	// Decrepcated
	Operation ObjectOperation `protobuf:"varint,3,opt,name=Operation,json=operation,enum=dg.model.ObjectOperation" json:"Operation"`
	// Decrepcated
	Repository int32 `protobuf:"varint,6,opt,name=Repository,json=repository" json:"Repository"`
	// Decrepcated
	Params map[string]string `protobuf:"bytes,8,rep,name=Params,json=params" json:"Params" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ObjectProperty) Reset()                    { *m = ObjectProperty{} }
func (m *ObjectProperty) String() string            { return proto.CompactTextString(m) }
func (*ObjectProperty) ProtoMessage()               {}
func (*ObjectProperty) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{13} }

func (m *ObjectProperty) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ObjectProperty) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ObjectProperty) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ObjectProperty) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

func (m *ObjectProperty) GetAttributes() map[string]int32 {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ObjectProperty) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ObjectProperty) GetOperation() ObjectOperation {
	if m != nil {
		return m.Operation
	}
	return ObjectOperation_OBJECT_OPERATION_DEFAULT
}

func (m *ObjectProperty) GetRepository() int32 {
	if m != nil {
		return m.Repository
	}
	return 0
}

func (m *ObjectProperty) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type RankImageRequest struct {
	Context         *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	Image           *Image              `protobuf:"bytes,2,opt,name=Image,json=image" json:"Image"`
	InterestedAreas []*Cutboard         `protobuf:"bytes,3,rep,name=InterestedAreas,json=interestedAreas" json:"InterestedAreas"`
	Candidates      []*FeatureVector    `protobuf:"bytes,4,rep,name=Candidates,json=candidates" json:"Candidates"`
	MaxCandidates   int32               `protobuf:"varint,5,opt,name=MaxCandidates,json=maxCandidates" json:"MaxCandidates"`
}

func (m *RankImageRequest) Reset()                    { *m = RankImageRequest{} }
func (m *RankImageRequest) String() string            { return proto.CompactTextString(m) }
func (*RankImageRequest) ProtoMessage()               {}
func (*RankImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{14} }

func (m *RankImageRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *RankImageRequest) GetInterestedAreas() []*Cutboard {
	if m != nil {
		return m.InterestedAreas
	}
	return nil
}

func (m *RankImageRequest) GetCandidates() []*FeatureVector {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *RankImageRequest) GetMaxCandidates() int32 {
	if m != nil {
		return m.MaxCandidates
	}
	return 0
}

type RankImageResponse struct {
	Context    *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	Candidates []*RankItem          `protobuf:"bytes,2,rep,name=Candidates,json=candidates" json:"Candidates"`
}

func (m *RankImageResponse) Reset()                    { *m = RankImageResponse{} }
func (m *RankImageResponse) String() string            { return proto.CompactTextString(m) }
func (*RankImageResponse) ProtoMessage()               {}
func (*RankImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{15} }

func (m *RankImageResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankImageResponse) GetCandidates() []*RankItem {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// Deprecated
type RankRepoSizeRequest struct {
	Context *RankRepoContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
}

func (m *RankRepoSizeRequest) Reset()                    { *m = RankRepoSizeRequest{} }
func (m *RankRepoSizeRequest) String() string            { return proto.CompactTextString(m) }
func (*RankRepoSizeRequest) ProtoMessage()               {}
func (*RankRepoSizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{16} }

func (m *RankRepoSizeRequest) GetContext() *RankRepoContext {
	if m != nil {
		return m.Context
	}
	return nil
}

// Deprecated
type RankRepoSizeResponse struct {
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	Size    int32                `protobuf:"varint,2,opt,name=Size,json=size" json:"Size"`
}

func (m *RankRepoSizeResponse) Reset()                    { *m = RankRepoSizeResponse{} }
func (m *RankRepoSizeResponse) String() string            { return proto.CompactTextString(m) }
func (*RankRepoSizeResponse) ProtoMessage()               {}
func (*RankRepoSizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{17} }

func (m *RankRepoSizeResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankRepoSizeResponse) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// Deprecated
type RankFeaturesPairRequest struct {
	Context  *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	Feature1 *FeatureVector      `protobuf:"bytes,2,opt,name=Feature1,json=feature1" json:"Feature1"`
	Feature2 *FeatureVector      `protobuf:"bytes,3,opt,name=Feature2,json=feature2" json:"Feature2"`
}

func (m *RankFeaturesPairRequest) Reset()                    { *m = RankFeaturesPairRequest{} }
func (m *RankFeaturesPairRequest) String() string            { return proto.CompactTextString(m) }
func (*RankFeaturesPairRequest) ProtoMessage()               {}
func (*RankFeaturesPairRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{18} }

func (m *RankFeaturesPairRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeaturesPairRequest) GetFeature1() *FeatureVector {
	if m != nil {
		return m.Feature1
	}
	return nil
}

func (m *RankFeaturesPairRequest) GetFeature2() *FeatureVector {
	if m != nil {
		return m.Feature2
	}
	return nil
}

// Deprecated
type RankFeaturesPairResponse struct {
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	Score   float32              `protobuf:"fixed32,2,opt,name=Score,json=score" json:"Score"`
}

func (m *RankFeaturesPairResponse) Reset()                    { *m = RankFeaturesPairResponse{} }
func (m *RankFeaturesPairResponse) String() string            { return proto.CompactTextString(m) }
func (*RankFeaturesPairResponse) ProtoMessage()               {}
func (*RankFeaturesPairResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{19} }

func (m *RankFeaturesPairResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeaturesPairResponse) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// Deprecated
type SearchRequest struct {
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	Col     string              `protobuf:"bytes,2,opt,name=Col,json=col" json:"Col"`
	Key     string              `protobuf:"bytes,3,opt,name=Key,json=key" json:"Key"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{20} }

func (m *SearchRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SearchRequest) GetCol() string {
	if m != nil {
		return m.Col
	}
	return ""
}

func (m *SearchRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// Deprecated
type SearchResponse struct {
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	Results []*RankItem          `protobuf:"bytes,2,rep,name=Results,json=results" json:"Results"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{21} }

func (m *SearchResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SearchResponse) GetResults() []*RankItem {
	if m != nil {
		return m.Results
	}
	return nil
}

// Deprecated
type GetImageContentRequest struct {
	URI string `protobuf:"bytes,1,opt,name=URI,json=uRI" json:"URI"`
}

func (m *GetImageContentRequest) Reset()                    { *m = GetImageContentRequest{} }
func (m *GetImageContentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetImageContentRequest) ProtoMessage()               {}
func (*GetImageContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{22} }

func (m *GetImageContentRequest) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

// Deprecated
type GetImageContentResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data" json:"Data"`
}

func (m *GetImageContentResponse) Reset()                    { *m = GetImageContentResponse{} }
func (m *GetImageContentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetImageContentResponse) ProtoMessage()               {}
func (*GetImageContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{23} }

func (m *GetImageContentResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Deprecated
type FeatureRankingRequest struct {
	ReqId           int64            `protobuf:"varint,1,opt,name=ReqId,json=reqId" json:"ReqId"`
	Type            RecognizeType    `protobuf:"varint,2,opt,name=Type,json=type,enum=dg.model.RecognizeType" json:"Type"`
	Image           *Image           `protobuf:"bytes,3,opt,name=Image,json=image" json:"Image"`
	InterestedAreas []*Cutboard      `protobuf:"bytes,4,rep,name=InterestedAreas,json=interestedAreas" json:"InterestedAreas"`
	DisabledAreas   []*Cutboard      `protobuf:"bytes,5,rep,name=DisabledAreas,json=disabledAreas" json:"DisabledAreas"`
	Candidates      []*FeatureVector `protobuf:"bytes,6,rep,name=Candidates,json=candidates" json:"Candidates"`
	Limit           int32            `protobuf:"varint,7,opt,name=Limit,json=limit" json:"Limit"`
}

func (m *FeatureRankingRequest) Reset()                    { *m = FeatureRankingRequest{} }
func (m *FeatureRankingRequest) String() string            { return proto.CompactTextString(m) }
func (*FeatureRankingRequest) ProtoMessage()               {}
func (*FeatureRankingRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{24} }

func (m *FeatureRankingRequest) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *FeatureRankingRequest) GetType() RecognizeType {
	if m != nil {
		return m.Type
	}
	return RecognizeType_REC_TYPE_INVALID
}

func (m *FeatureRankingRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *FeatureRankingRequest) GetInterestedAreas() []*Cutboard {
	if m != nil {
		return m.InterestedAreas
	}
	return nil
}

func (m *FeatureRankingRequest) GetDisabledAreas() []*Cutboard {
	if m != nil {
		return m.DisabledAreas
	}
	return nil
}

func (m *FeatureRankingRequest) GetCandidates() []*FeatureVector {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *FeatureRankingRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Deprecated
type FeatureRankingResponse struct {
	ReqId  int64     `protobuf:"varint,1,opt,name=ReqId,json=reqId" json:"ReqId"`
	Ids    []int64   `protobuf:"varint,2,rep,packed,name=Ids,json=ids" json:"Ids"`
	Scores []float32 `protobuf:"fixed32,3,rep,packed,name=Scores,json=scores" json:"Scores"`
}

func (m *FeatureRankingResponse) Reset()                    { *m = FeatureRankingResponse{} }
func (m *FeatureRankingResponse) String() string            { return proto.CompactTextString(m) }
func (*FeatureRankingResponse) ProtoMessage()               {}
func (*FeatureRankingResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{25} }

func (m *FeatureRankingResponse) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *FeatureRankingResponse) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FeatureRankingResponse) GetScores() []float32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

// Deprecated
type InfoAndFeature struct {
	Info    *RankItem      `protobuf:"bytes,1,opt,name=Info,json=info" json:"Info"`
	Feature *FeatureVector `protobuf:"bytes,2,opt,name=Feature,json=feature" json:"Feature"`
}

func (m *InfoAndFeature) Reset()                    { *m = InfoAndFeature{} }
func (m *InfoAndFeature) String() string            { return proto.CompactTextString(m) }
func (*InfoAndFeature) ProtoMessage()               {}
func (*InfoAndFeature) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{26} }

func (m *InfoAndFeature) GetInfo() *RankItem {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *InfoAndFeature) GetFeature() *FeatureVector {
	if m != nil {
		return m.Feature
	}
	return nil
}

// Deprecated
type RankRepoContext struct {
	RepoId      int32             `protobuf:"varint,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	Operation   ObjectOperation   `protobuf:"varint,2,opt,name=Operation,json=operation,enum=dg.model.ObjectOperation" json:"Operation"`
	Level       RepoLevel         `protobuf:"varint,3,opt,name=Level,json=level,enum=dg.model.RepoLevel" json:"Level"`
	FeatureLen  int32             `protobuf:"varint,4,opt,name=FeatureLen,json=featureLen" json:"FeatureLen"`
	FeatureType string            `protobuf:"bytes,5,opt,name=FeatureType,json=featureType" json:"FeatureType"`
	Params      map[string]string `protobuf:"bytes,6,rep,name=Params,json=params" json:"Params" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankRepoContext) Reset()                    { *m = RankRepoContext{} }
func (m *RankRepoContext) String() string            { return proto.CompactTextString(m) }
func (*RankRepoContext) ProtoMessage()               {}
func (*RankRepoContext) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{27} }

func (m *RankRepoContext) GetRepoId() int32 {
	if m != nil {
		return m.RepoId
	}
	return 0
}

func (m *RankRepoContext) GetOperation() ObjectOperation {
	if m != nil {
		return m.Operation
	}
	return ObjectOperation_OBJECT_OPERATION_DEFAULT
}

func (m *RankRepoContext) GetLevel() RepoLevel {
	if m != nil {
		return m.Level
	}
	return RepoLevel_REPO_LEVEL_NOT_USED
}

func (m *RankRepoContext) GetFeatureLen() int32 {
	if m != nil {
		return m.FeatureLen
	}
	return 0
}

func (m *RankRepoContext) GetFeatureType() string {
	if m != nil {
		return m.FeatureType
	}
	return ""
}

func (m *RankRepoContext) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*RankRequestContext)(nil), "dg.model.RankRequestContext")
	proto.RegisterType((*RankResponseContext)(nil), "dg.model.RankResponseContext")
	proto.RegisterType((*RankFeatureRequest)(nil), "dg.model.RankFeatureRequest")
	proto.RegisterType((*RankFeatureResponse)(nil), "dg.model.RankFeatureResponse")
	proto.RegisterType((*RankRepoOpRequest)(nil), "dg.model.RankRepoOpRequest")
	proto.RegisterType((*RankRepoOpResponse)(nil), "dg.model.RankRepoOpResponse")
	proto.RegisterType((*RankFeatureOpRequest)(nil), "dg.model.RankFeatureOpRequest")
	proto.RegisterType((*RankFeatureOpResponse)(nil), "dg.model.RankFeatureOpResponse")
	proto.RegisterType((*RankFeatureOperation)(nil), "dg.model.RankFeatureOperation")
	proto.RegisterType((*RankRepoOperation)(nil), "dg.model.RankRepoOperation")
	proto.RegisterType((*RankItem)(nil), "dg.model.RankItem")
	proto.RegisterType((*AddFeaturesRequest)(nil), "dg.model.AddFeaturesRequest")
	proto.RegisterType((*AddFeaturesResponse)(nil), "dg.model.AddFeaturesResponse")
	proto.RegisterType((*ObjectProperty)(nil), "dg.model.ObjectProperty")
	proto.RegisterType((*RankImageRequest)(nil), "dg.model.RankImageRequest")
	proto.RegisterType((*RankImageResponse)(nil), "dg.model.RankImageResponse")
	proto.RegisterType((*RankRepoSizeRequest)(nil), "dg.model.RankRepoSizeRequest")
	proto.RegisterType((*RankRepoSizeResponse)(nil), "dg.model.RankRepoSizeResponse")
	proto.RegisterType((*RankFeaturesPairRequest)(nil), "dg.model.RankFeaturesPairRequest")
	proto.RegisterType((*RankFeaturesPairResponse)(nil), "dg.model.RankFeaturesPairResponse")
	proto.RegisterType((*SearchRequest)(nil), "dg.model.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "dg.model.SearchResponse")
	proto.RegisterType((*GetImageContentRequest)(nil), "dg.model.GetImageContentRequest")
	proto.RegisterType((*GetImageContentResponse)(nil), "dg.model.GetImageContentResponse")
	proto.RegisterType((*FeatureRankingRequest)(nil), "dg.model.FeatureRankingRequest")
	proto.RegisterType((*FeatureRankingResponse)(nil), "dg.model.FeatureRankingResponse")
	proto.RegisterType((*InfoAndFeature)(nil), "dg.model.InfoAndFeature")
	proto.RegisterType((*RankRepoContext)(nil), "dg.model.RankRepoContext")
	proto.RegisterEnum("dg.model.FeatureDataType", FeatureDataType_name, FeatureDataType_value)
	proto.RegisterEnum("dg.model.RepoOperation", RepoOperation_name, RepoOperation_value)
	proto.RegisterEnum("dg.model.ObjectOperation", ObjectOperation_name, ObjectOperation_value)
	proto.RegisterEnum("dg.model.RepoLevel", RepoLevel_name, RepoLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SimilarityService service

type SimilarityServiceClient interface {
	// -特征库操作服务接口,实现库的CRUD操作
	RepoOperation(ctx context.Context, in *RankRepoOpRequest, opts ...grpc.CallOption) (*RankRepoOpResponse, error)
	// -特征操作服务接口, 实现特征的CRUD操作
	ObjectFeatureOperation(ctx context.Context, in *RankFeatureOpRequest, opts ...grpc.CallOption) (*RankFeatureOpResponse, error)
	// -特征比对服务接口, 实现特征相似度的比对服务
	RankFeature(ctx context.Context, in *RankFeatureRequest, opts ...grpc.CallOption) (*RankFeatureResponse, error)
	// Deprecated
	// -特征添加服务接口, 向库内增加特征. 为保证兼容保留,不建议使用
	AddFeatures(ctx context.Context, in *AddFeaturesRequest, opts ...grpc.CallOption) (*AddFeaturesResponse, error)
	// -图片比对服务, 未实现
	RankImage(ctx context.Context, in *RankImageRequest, opts ...grpc.CallOption) (*RankImageResponse, error)
	// Deprecated
	// -获取图片内容. 老接口, 不再使用
	GetImageContent(ctx context.Context, in *GetImageContentRequest, opts ...grpc.CallOption) (*GetImageContentResponse, error)
	// Deprecated
	// -老接口, 不再使用
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Deprecated
	// -老接口, 不再使用
	RankRepoSize(ctx context.Context, in *RankRepoSizeRequest, opts ...grpc.CallOption) (*RankRepoSizeResponse, error)
	// Deprecated
	// -老接口, 不再使用
	RankFeaturesPair(ctx context.Context, in *RankFeaturesPairRequest, opts ...grpc.CallOption) (*RankFeaturesPairResponse, error)
	// Deprecated
	// -老接口, 不再使用
	GetRankedVector(ctx context.Context, in *FeatureRankingRequest, opts ...grpc.CallOption) (*FeatureRankingResponse, error)
}

type similarityServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimilarityServiceClient(cc *grpc.ClientConn) SimilarityServiceClient {
	return &similarityServiceClient{cc}
}

func (c *similarityServiceClient) RepoOperation(ctx context.Context, in *RankRepoOpRequest, opts ...grpc.CallOption) (*RankRepoOpResponse, error) {
	out := new(RankRepoOpResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/RepoOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) ObjectFeatureOperation(ctx context.Context, in *RankFeatureOpRequest, opts ...grpc.CallOption) (*RankFeatureOpResponse, error) {
	out := new(RankFeatureOpResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/ObjectFeatureOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) RankFeature(ctx context.Context, in *RankFeatureRequest, opts ...grpc.CallOption) (*RankFeatureResponse, error) {
	out := new(RankFeatureResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/RankFeature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) AddFeatures(ctx context.Context, in *AddFeaturesRequest, opts ...grpc.CallOption) (*AddFeaturesResponse, error) {
	out := new(AddFeaturesResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/AddFeatures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) RankImage(ctx context.Context, in *RankImageRequest, opts ...grpc.CallOption) (*RankImageResponse, error) {
	out := new(RankImageResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/RankImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) GetImageContent(ctx context.Context, in *GetImageContentRequest, opts ...grpc.CallOption) (*GetImageContentResponse, error) {
	out := new(GetImageContentResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/GetImageContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) RankRepoSize(ctx context.Context, in *RankRepoSizeRequest, opts ...grpc.CallOption) (*RankRepoSizeResponse, error) {
	out := new(RankRepoSizeResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/RankRepoSize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) RankFeaturesPair(ctx context.Context, in *RankFeaturesPairRequest, opts ...grpc.CallOption) (*RankFeaturesPairResponse, error) {
	out := new(RankFeaturesPairResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/RankFeaturesPair", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) GetRankedVector(ctx context.Context, in *FeatureRankingRequest, opts ...grpc.CallOption) (*FeatureRankingResponse, error) {
	out := new(FeatureRankingResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/GetRankedVector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimilarityService service

type SimilarityServiceServer interface {
	// -特征库操作服务接口,实现库的CRUD操作
	RepoOperation(context.Context, *RankRepoOpRequest) (*RankRepoOpResponse, error)
	// -特征操作服务接口, 实现特征的CRUD操作
	ObjectFeatureOperation(context.Context, *RankFeatureOpRequest) (*RankFeatureOpResponse, error)
	// -特征比对服务接口, 实现特征相似度的比对服务
	RankFeature(context.Context, *RankFeatureRequest) (*RankFeatureResponse, error)
	// Deprecated
	// -特征添加服务接口, 向库内增加特征. 为保证兼容保留,不建议使用
	AddFeatures(context.Context, *AddFeaturesRequest) (*AddFeaturesResponse, error)
	// -图片比对服务, 未实现
	RankImage(context.Context, *RankImageRequest) (*RankImageResponse, error)
	// Deprecated
	// -获取图片内容. 老接口, 不再使用
	GetImageContent(context.Context, *GetImageContentRequest) (*GetImageContentResponse, error)
	// Deprecated
	// -老接口, 不再使用
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Deprecated
	// -老接口, 不再使用
	RankRepoSize(context.Context, *RankRepoSizeRequest) (*RankRepoSizeResponse, error)
	// Deprecated
	// -老接口, 不再使用
	RankFeaturesPair(context.Context, *RankFeaturesPairRequest) (*RankFeaturesPairResponse, error)
	// Deprecated
	// -老接口, 不再使用
	GetRankedVector(context.Context, *FeatureRankingRequest) (*FeatureRankingResponse, error)
}

func RegisterSimilarityServiceServer(s *grpc.Server, srv SimilarityServiceServer) {
	s.RegisterService(&_SimilarityService_serviceDesc, srv)
}

func _SimilarityService_RepoOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankRepoOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).RepoOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/RepoOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).RepoOperation(ctx, req.(*RankRepoOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_ObjectFeatureOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankFeatureOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).ObjectFeatureOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/ObjectFeatureOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).ObjectFeatureOperation(ctx, req.(*RankFeatureOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_RankFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).RankFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/RankFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).RankFeature(ctx, req.(*RankFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_AddFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).AddFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/AddFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).AddFeatures(ctx, req.(*AddFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_RankImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).RankImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/RankImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).RankImage(ctx, req.(*RankImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_GetImageContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).GetImageContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/GetImageContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).GetImageContent(ctx, req.(*GetImageContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_RankRepoSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankRepoSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).RankRepoSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/RankRepoSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).RankRepoSize(ctx, req.(*RankRepoSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_RankFeaturesPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankFeaturesPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).RankFeaturesPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/RankFeaturesPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).RankFeaturesPair(ctx, req.(*RankFeaturesPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_GetRankedVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).GetRankedVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/GetRankedVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).GetRankedVector(ctx, req.(*FeatureRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimilarityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dg.model.SimilarityService",
	HandlerType: (*SimilarityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepoOperation",
			Handler:    _SimilarityService_RepoOperation_Handler,
		},
		{
			MethodName: "ObjectFeatureOperation",
			Handler:    _SimilarityService_ObjectFeatureOperation_Handler,
		},
		{
			MethodName: "RankFeature",
			Handler:    _SimilarityService_RankFeature_Handler,
		},
		{
			MethodName: "AddFeatures",
			Handler:    _SimilarityService_AddFeatures_Handler,
		},
		{
			MethodName: "RankImage",
			Handler:    _SimilarityService_RankImage_Handler,
		},
		{
			MethodName: "GetImageContent",
			Handler:    _SimilarityService_GetImageContent_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _SimilarityService_Search_Handler,
		},
		{
			MethodName: "RankRepoSize",
			Handler:    _SimilarityService_RankRepoSize_Handler,
		},
		{
			MethodName: "RankFeaturesPair",
			Handler:    _SimilarityService_RankFeaturesPair_Handler,
		},
		{
			MethodName: "GetRankedVector",
			Handler:    _SimilarityService_GetRankedVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ranker.proto",
}

func init() { proto.RegisterFile("ranker.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 1921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x59, 0x4f, 0x93, 0xdb, 0x48,
	0x15, 0x5f, 0x4b, 0x96, 0xff, 0xbc, 0xc9, 0xd8, 0x4e, 0x6f, 0x32, 0xe3, 0x28, 0x33, 0xd9, 0x89,
	0x2a, 0x0b, 0x61, 0x58, 0x86, 0x8a, 0x53, 0xc0, 0xb2, 0xc5, 0xc2, 0x7a, 0xc7, 0x9a, 0xac, 0xb3,
	0x4e, 0x6c, 0x64, 0x3b, 0xb5, 0x5b, 0x1c, 0xa6, 0x34, 0x76, 0xcf, 0x20, 0x62, 0x5b, 0x5e, 0x49,
	0x0e, 0x3b, 0x14, 0x07, 0x8a, 0x1b, 0x14, 0xb5, 0x45, 0x15, 0x77, 0xb8, 0xee, 0x17, 0xe0, 0xc4,
	0x89, 0x1b, 0x7c, 0x00, 0x0e, 0x7c, 0x04, 0xbe, 0x05, 0xdd, 0xea, 0x96, 0xd4, 0xfa, 0x63, 0xcf,
	0x04, 0xa5, 0x8a, 0x4b, 0xc6, 0xdd, 0xef, 0x4f, 0xbf, 0x7f, 0xfd, 0xde, 0xaf, 0x15, 0xb8, 0xe1,
	0x98, 0x8b, 0x97, 0xd8, 0x39, 0x5a, 0x3a, 0xb6, 0x67, 0xa3, 0xca, 0xf4, 0xe2, 0x68, 0x6e, 0x4f,
	0xf1, 0x4c, 0xbd, 0x31, 0xb1, 0xe7, 0x73, 0x7b, 0xc1, 0xf6, 0xd5, 0x9b, 0x33, 0x7b, 0x62, 0xce,
	0xc4, 0x2d, 0xed, 0x77, 0x12, 0x20, 0x83, 0xc8, 0x1a, 0xf8, 0x8b, 0x15, 0x76, 0xbd, 0x63, 0x7b,
	0xe1, 0xe1, 0x2f, 0x3d, 0xb4, 0x07, 0xd5, 0x21, 0x76, 0x5d, 0xcb, 0x5e, 0x74, 0xa7, 0xcd, 0xc2,
	0x41, 0xe1, 0x61, 0xd5, 0xa8, 0xba, 0xc1, 0x06, 0x52, 0xa1, 0x32, 0x76, 0xb1, 0xf3, 0xdc, 0x9c,
	0xe3, 0xa6, 0xe4, 0x13, 0x2b, 0x2b, 0xbe, 0x46, 0xb7, 0x40, 0x19, 0xd9, 0x2f, 0xf1, 0xa2, 0x29,
	0xfb, 0x04, 0xc5, 0xa3, 0x0b, 0xf4, 0x11, 0x94, 0x06, 0xa6, 0x63, 0xce, 0xdd, 0xa6, 0x72, 0x20,
	0x3f, 0xdc, 0x6a, 0x3d, 0x3c, 0x0a, 0x4c, 0x3c, 0x4a, 0x9f, 0x7e, 0xc4, 0x58, 0xf5, 0x85, 0xe7,
	0x5c, 0x1a, 0xa5, 0xa5, 0xbf, 0x40, 0xdf, 0x80, 0xe2, 0xe8, 0x72, 0x89, 0x9b, 0x45, 0xa2, 0xb6,
	0xd6, 0x42, 0x71, 0x79, 0x4a, 0x31, 0x8a, 0x1e, 0xf9, 0x57, 0xfd, 0x21, 0x6c, 0x09, 0xe2, 0xa8,
	0x01, 0xf2, 0x4b, 0x7c, 0xc9, 0x5d, 0xa0, 0x3f, 0xa9, 0x81, 0xaf, 0xcc, 0xd9, 0x2a, 0xb0, 0x9c,
	0x2d, 0x3e, 0x90, 0xde, 0x2f, 0x68, 0xff, 0x92, 0xe0, 0x6d, 0x66, 0x8d, 0xbb, 0xb4, 0x17, 0x2e,
	0xbe, 0x5e, 0x30, 0x76, 0xa0, 0x34, 0xf4, 0x4c, 0x6f, 0xe5, 0x72, 0x85, 0x25, 0xd7, 0x5f, 0xa1,
	0x26, 0x94, 0x9f, 0x11, 0x26, 0xf3, 0x02, 0xf3, 0x50, 0x94, 0xe7, 0x6c, 0x89, 0xde, 0x83, 0x2a,
	0x77, 0x78, 0xe4, 0xfa, 0xfe, 0x6c, 0xb5, 0x6a, 0x91, 0x3f, 0x23, 0x6b, 0x8e, 0x8d, 0xaa, 0x13,
	0x30, 0xa0, 0x23, 0x80, 0xc0, 0xa0, 0x11, 0x0d, 0x5f, 0x16, 0x3b, 0x38, 0x21, 0x07, 0xea, 0x40,
	0xb9, 0x83, 0xcf, 0x56, 0x17, 0x84, 0xb9, 0xe4, 0xc7, 0xfa, 0x30, 0x19, 0xeb, 0x98, 0x77, 0x47,
	0x9c, 0x99, 0x45, 0xbb, 0x3c, 0x65, 0x2b, 0xf5, 0x29, 0xdc, 0x10, 0x09, 0x19, 0x71, 0x7c, 0x20,
	0xc6, 0x31, 0x6d, 0x92, 0x10, 0xd7, 0xaf, 0x65, 0x56, 0x63, 0x27, 0x98, 0x04, 0xc6, 0xc1, 0xdc,
	0x77, 0xf4, 0x7d, 0x28, 0x73, 0x1b, 0x7c, 0xb5, 0x5b, 0xad, 0xbd, 0x4d, 0x45, 0x61, 0x94, 0x27,
	0x3c, 0x1d, 0x3f, 0x86, 0xed, 0xfe, 0xd9, 0x2f, 0xf0, 0xc4, 0xe3, 0xfa, 0xfc, 0xf0, 0x6e, 0xb5,
	0x9a, 0x91, 0x34, 0x23, 0x0f, 0x1c, 0x7b, 0x89, 0x1d, 0xef, 0xd2, 0xd8, 0xb6, 0x45, 0x76, 0x12,
	0xa0, 0x06, 0x63, 0x38, 0x36, 0x17, 0x53, 0x6b, 0x6a, 0x7a, 0x98, 0x66, 0x41, 0xde, 0xa8, 0xa2,
	0x61, 0x27, 0x24, 0x84, 0x8a, 0x2e, 0x65, 0x55, 0x74, 0xdc, 0xd7, 0xcc, 0x8a, 0x7e, 0x00, 0xdb,
	0xcf, 0xcc, 0x2f, 0x05, 0x23, 0x68, 0x6e, 0x15, 0x63, 0x7b, 0x2e, 0x6e, 0xa2, 0x47, 0x50, 0x0e,
	0xfc, 0x64, 0x81, 0xde, 0x8d, 0x0e, 0xe2, 0x84, 0x17, 0xc4, 0x32, 0xdb, 0x31, 0xca, 0xe7, 0x6c,
	0x99, 0xe7, 0x0a, 0xfc, 0xb6, 0xc0, 0xae, 0x40, 0x68, 0x3e, 0xab, 0x15, 0xf4, 0x83, 0x64, 0xae,
	0xf6, 0x37, 0x16, 0x55, 0x94, 0xac, 0x16, 0x80, 0xe0, 0xa1, 0xe4, 0x87, 0x2a, 0x71, 0x79, 0xbb,
	0x1e, 0x9e, 0x1b, 0x30, 0x09, 0xb9, 0xb4, 0x5f, 0xc3, 0x4d, 0xa6, 0x73, 0x69, 0xf7, 0x97, 0x79,
	0xab, 0xe5, 0xbb, 0x50, 0xa4, 0x8a, 0x78, 0xf0, 0xee, 0x26, 0x85, 0xe8, 0x11, 0xd8, 0x31, 0x3d,
	0x72, 0x97, 0x8d, 0xa2, 0x43, 0x96, 0xda, 0x6f, 0x0a, 0x41, 0x47, 0x64, 0xc7, 0xe7, 0x8d, 0xc0,
	0x23, 0x50, 0xa8, 0xaa, 0xc0, 0xf9, 0x8d, 0x16, 0x28, 0xd4, 0x02, 0x57, 0xfb, 0x7d, 0x01, 0x6e,
	0x09, 0x59, 0xc8, 0x1f, 0x84, 0x0f, 0xa0, 0xc2, 0x75, 0xb9, 0x3c, 0x10, 0xf7, 0x32, 0xcb, 0x35,
	0xb2, 0xa4, 0xc2, 0x8b, 0xc9, 0xd5, 0xfe, 0x50, 0x80, 0xdb, 0x09, 0x63, 0xf2, 0x86, 0x24, 0x8f,
	0x39, 0x5f, 0x4b, 0x89, 0xd8, 0x70, 0x16, 0xda, 0x87, 0x69, 0x30, 0xc3, 0x16, 0x5d, 0x72, 0xfc,
	0x15, 0xb1, 0xb2, 0x1a, 0x32, 0xf9, 0xa7, 0xd5, 0x5a, 0x77, 0x92, 0xf7, 0x3c, 0x3a, 0xa8, 0x6a,
	0x87, 0x0a, 0x3f, 0x82, 0x5a, 0xac, 0xcf, 0xb8, 0xa4, 0xd1, 0x6c, 0xee, 0x12, 0xb5, 0x58, 0xa3,
	0x71, 0xd1, 0xc7, 0x61, 0x8f, 0x28, 0x66, 0x75, 0xe2, 0xa4, 0x0b, 0x59, 0x5d, 0x22, 0xcf, 0x65,
	0xfe, 0xb3, 0x2c, 0x5e, 0xa4, 0xab, 0xe2, 0xf4, 0xbd, 0x74, 0x9c, 0x84, 0x56, 0x13, 0xaf, 0x53,
	0x21, 0x4a, 0xdf, 0x02, 0xa5, 0x87, 0x5f, 0xe1, 0x99, 0xdf, 0x85, 0x6b, 0xad, 0xb7, 0xe3, 0x22,
	0x3e, 0xc9, 0x50, 0x66, 0xf4, 0x0f, 0xba, 0x07, 0xc0, 0x5d, 0xee, 0x11, 0x7c, 0x50, 0xf4, 0xbb,
	0x1d, 0x9c, 0x87, 0x3b, 0xe8, 0x18, 0xea, 0x9c, 0xde, 0x31, 0x3d, 0xd3, 0x9f, 0xf6, 0x4a, 0x32,
	0x5f, 0x09, 0x06, 0xa3, 0x7e, 0x1e, 0xdf, 0xa0, 0xd8, 0xe4, 0xd8, 0x5c, 0x9a, 0x13, 0xcb, 0xbb,
	0x24, 0x9d, 0x99, 0x1e, 0x51, 0x99, 0xf0, 0x35, 0x42, 0x50, 0x1c, 0x5a, 0xbf, 0xc2, 0xcd, 0xb2,
	0xbf, 0x5f, 0x74, 0xc9, 0x6f, 0xf4, 0x93, 0x30, 0x47, 0x15, 0x3f, 0x47, 0xdf, 0xdc, 0x70, 0x3f,
	0xdf, 0x74, 0x82, 0xfe, 0x2a, 0x41, 0x25, 0xe8, 0x80, 0xa8, 0x06, 0x52, 0x98, 0x13, 0xc9, 0x9a,
	0x52, 0xb1, 0xe1, 0xc4, 0xe6, 0x6d, 0x5f, 0x32, 0x14, 0x97, 0x2e, 0x84, 0xec, 0x95, 0x63, 0xd9,
	0x23, 0x6e, 0xf7, 0x08, 0xb8, 0xf3, 0x93, 0x57, 0x61, 0x90, 0x6c, 0xc6, 0xd7, 0xd4, 0x6d, 0x3a,
	0x92, 0x9b, 0x55, 0xb2, 0x2f, 0x13, 0x98, 0x44, 0x7e, 0x93, 0xd2, 0x84, 0xb6, 0xe7, 0x39, 0xd6,
	0xd9, 0x8a, 0xf6, 0x65, 0x36, 0xc2, 0xb4, 0x74, 0x5f, 0x3e, 0x8a, 0x98, 0x98, 0xd7, 0x60, 0x86,
	0x1b, 0x54, 0xaf, 0x0f, 0x01, 0x19, 0xbc, 0x29, 0x2e, 0x28, 0xfc, 0x23, 0xee, 0x8f, 0x8d, 0xae,
	0x9f, 0x5c, 0xe2, 0xfe, 0xca, 0xe8, 0x52, 0x2e, 0x9a, 0x1c, 0x3f, 0x95, 0x84, 0x8b, 0xb4, 0x78,
	0x53, 0xfd, 0x10, 0xea, 0x09, 0xc5, 0x57, 0xc5, 0x4d, 0x11, 0xe3, 0xf6, 0x15, 0x69, 0xd1, 0xed,
	0xe9, 0x34, 0xb8, 0x67, 0x79, 0xbb, 0x63, 0xfa, 0xa2, 0x4b, 0xaf, 0x77, 0xd1, 0xb5, 0x3f, 0x92,
	0xb1, 0x19, 0x33, 0x28, 0x6f, 0x87, 0xcc, 0x6f, 0xd2, 0xbf, 0xe5, 0x40, 0x45, 0xc0, 0x92, 0xaa,
	0x30, 0xb1, 0x66, 0x8a, 0x6b, 0x6a, 0x46, 0x11, 0x6a, 0xa6, 0x19, 0x41, 0x11, 0x56, 0x7c, 0x01,
	0xe2, 0x40, 0x9f, 0xc4, 0xaa, 0xa9, 0x9a, 0x04, 0x44, 0x71, 0x3b, 0xae, 0xaa, 0x29, 0xff, 0xe2,
	0xb3, 0x9c, 0xfb, 0x90, 0x3e, 0xde, 0xc1, 0xe5, 0xd7, 0xe8, 0xe0, 0xf7, 0x28, 0x74, 0x26, 0x03,
	0xd5, 0x22, 0xf0, 0x28, 0xe8, 0x06, 0xe0, 0x84, 0x3b, 0xe8, 0x47, 0x89, 0xbb, 0xff, 0x60, 0xad,
	0xc9, 0x59, 0x17, 0x3f, 0x5f, 0x11, 0xe7, 0xe9, 0x1b, 0x5f, 0x49, 0xd0, 0xf0, 0x6f, 0xe8, 0x9c,
	0x3c, 0x27, 0xf2, 0x56, 0xff, 0xbb, 0xa0, 0xf8, 0x7a, 0xf8, 0x24, 0xae, 0x47, 0x52, 0x4c, 0xbd,
	0x62, 0xd1, 0x3f, 0x24, 0x56, 0xf5, 0x2e, 0x11, 0x20, 0xa5, 0xe5, 0xe1, 0x69, 0xdb, 0xc1, 0x66,
	0x30, 0x0e, 0x05, 0x34, 0x77, 0xbc, 0xf2, 0xce, 0x6c, 0xd3, 0x99, 0x1a, 0x75, 0x2b, 0xce, 0x4a,
	0x52, 0x08, 0x29, 0xb4, 0xbd, 0x16, 0xc8, 0x0a, 0x58, 0xf0, 0x7a, 0x20, 0x99, 0x62, 0xb6, 0x9b,
	0x42, 0x40, 0xfe, 0x1f, 0xa0, 0xf5, 0x69, 0xf0, 0x76, 0x5c, 0xda, 0x74, 0xc6, 0x04, 0x59, 0x79,
	0x9c, 0xb4, 0xe1, 0x4e, 0x7a, 0xbe, 0x24, 0xcf, 0xd7, 0x26, 0x0c, 0xe2, 0x44, 0xba, 0xf2, 0x3a,
	0x14, 0x0c, 0x3e, 0x29, 0x1a, 0x7c, 0xda, 0xdf, 0x0a, 0xb0, 0x2b, 0xa0, 0x10, 0x77, 0x60, 0x5a,
	0x4e, 0xde, 0x5a, 0x7a, 0x1c, 0x02, 0xbb, 0x47, 0x57, 0xbd, 0x56, 0x02, 0x44, 0xf7, 0x48, 0x10,
	0x6a, 0xf1, 0xa7, 0xdc, 0x95, 0x42, 0x2d, 0xcd, 0x82, 0x66, 0xda, 0xf8, 0xbc, 0x61, 0xca, 0x1c,
	0xb9, 0xda, 0x4b, 0xd8, 0x1e, 0x62, 0xd3, 0x99, 0xfc, 0x3c, 0x6f, 0x74, 0xc8, 0x15, 0x3f, 0xb6,
	0x67, 0xfc, 0x3a, 0xcb, 0x13, 0x7b, 0x46, 0x77, 0x3e, 0x25, 0x97, 0x5e, 0x0e, 0x2f, 0xbd, 0xf6,
	0x4b, 0xa8, 0x05, 0x87, 0xe5, 0xf5, 0xe6, 0x3d, 0x28, 0x13, 0xda, 0x6a, 0xe6, 0x6d, 0x2a, 0xe1,
	0xb2, 0xc3, 0x58, 0xb4, 0x43, 0xd8, 0x79, 0x82, 0x3d, 0xff, 0x02, 0xf9, 0x9a, 0x16, 0x5e, 0xe0,
	0x2e, 0x1f, 0xe9, 0x85, 0x70, 0xa4, 0x6b, 0xdf, 0x81, 0xdd, 0x14, 0x2f, 0xb7, 0x36, 0x98, 0xf6,
	0x85, 0x68, 0xda, 0x6b, 0xff, 0x90, 0xe0, 0x76, 0xf0, 0xa0, 0x24, 0xe7, 0x5a, 0x8b, 0x8b, 0x40,
	0xf5, 0x2d, 0xfa, 0x36, 0xfa, 0x82, 0x0f, 0x25, 0x99, 0x3e, 0x7f, 0xc8, 0x02, 0x7d, 0x5b, 0x98,
	0x01, 0x09, 0x10, 0x3a, 0xb1, 0x2f, 0x16, 0xa4, 0x78, 0xa3, 0xef, 0x3d, 0x51, 0xfb, 0x92, 0x5f,
	0xb7, 0x7d, 0x15, 0xaf, 0xdf, 0xbe, 0xde, 0x87, 0xed, 0x8e, 0xe5, 0x9a, 0x67, 0xb3, 0x40, 0x56,
	0x59, 0x2b, 0xbb, 0x3d, 0x15, 0x19, 0x13, 0x8d, 0xaf, 0x74, 0xfd, 0xc6, 0x47, 0x42, 0xd3, 0xb3,
	0xe6, 0x96, 0xc7, 0xc1, 0xaa, 0x32, 0xa3, 0x0b, 0xed, 0x33, 0xd8, 0x49, 0x46, 0x92, 0x07, 0x3e,
	0x3b, 0x94, 0x24, 0x77, 0xdd, 0x29, 0xcb, 0xbf, 0x6c, 0xc8, 0xd6, 0xd4, 0xf5, 0x3f, 0x57, 0xd1,
	0xb2, 0x66, 0xed, 0x5b, 0x32, 0x4a, 0x7e, 0x91, 0xbb, 0xa4, 0xca, 0x6b, 0xdd, 0xc5, 0xb9, 0xdd,
	0x5e, 0x04, 0x28, 0x86, 0x7e, 0x71, 0xa3, 0x3b, 0xbc, 0xea, 0xb2, 0x8a, 0xa7, 0x68, 0x11, 0xfa,
	0xff, 0xf0, 0x85, 0x42, 0xfb, 0xa7, 0x04, 0xf5, 0x44, 0xf7, 0x4b, 0xbc, 0x4b, 0x94, 0xfc, 0xef,
	0xb7, 0x37, 0xf8, 0x32, 0x39, 0x80, 0x2d, 0x4e, 0x0f, 0x5f, 0x25, 0x55, 0x63, 0xeb, 0x3c, 0xda,
	0x42, 0x1f, 0x26, 0x3e, 0x07, 0xbd, 0xbb, 0xb6, 0xcd, 0xbf, 0xe1, 0x47, 0xc4, 0xe1, 0xa7, 0xa9,
	0x57, 0x13, 0xba, 0x0b, 0xbb, 0x27, 0x7a, 0x7b, 0x34, 0x36, 0xf4, 0xd3, 0x4e, 0x7b, 0xd4, 0x3e,
	0x1d, 0x7d, 0x3e, 0xd0, 0x4f, 0x4f, 0x7a, 0xfd, 0xf6, 0xa8, 0xf1, 0x56, 0x36, 0x71, 0xf8, 0x49,
	0xdf, 0x18, 0x35, 0x0a, 0x87, 0x7f, 0x2a, 0xc0, 0x76, 0xfc, 0xb9, 0xa8, 0xc2, 0x8e, 0xa1, 0x0f,
	0xfa, 0xa7, 0xfd, 0x81, 0x6e, 0xb4, 0x47, 0xdd, 0xfe, 0xf3, 0xd3, 0x8e, 0x7e, 0xd2, 0x1e, 0xf7,
	0xa8, 0xaa, 0x1d, 0x40, 0x09, 0x5a, 0xbb, 0xd3, 0x69, 0x14, 0xd0, 0x1d, 0xb8, 0x9d, 0x92, 0xe9,
	0xe9, 0x23, 0xbd, 0x21, 0x65, 0x90, 0xc6, 0x03, 0x62, 0x86, 0xde, 0x90, 0x09, 0xbc, 0xbc, 0x95,
	0x20, 0xfd, 0x74, 0xac, 0x1b, 0x9f, 0x37, 0x8a, 0x87, 0x7f, 0x29, 0x40, 0x3d, 0x91, 0x68, 0xb4,
	0x07, 0xcd, 0xfe, 0xc7, 0x4f, 0xf5, 0xe3, 0x51, 0xa6, 0x65, 0x44, 0x57, 0x8a, 0xca, 0x6c, 0x23,
	0xee, 0x67, 0xc8, 0x71, 0xeb, 0xb2, 0x88, 0xa1, 0x7d, 0x24, 0x12, 0x29, 0x62, 0x60, 0xe1, 0x7f,
	0x0a, 0xf4, 0x9b, 0x2e, 0xaf, 0x2a, 0xb4, 0x4b, 0xb0, 0x00, 0xf5, 0xa4, 0xa7, 0xbf, 0xd0, 0x7b,
	0xa7, 0xcf, 0xfb, 0xa3, 0xd3, 0xf1, 0x50, 0xef, 0x10, 0xb3, 0x02, 0xef, 0x19, 0x81, 0xc8, 0x0f,
	0x47, 0x7d, 0xa3, 0xfd, 0x44, 0x27, 0x76, 0xdd, 0x26, 0x08, 0x26, 0x46, 0x32, 0xda, 0xcf, 0x88,
	0x45, 0xa9, 0xed, 0x27, 0x83, 0x31, 0xb1, 0x65, 0x1f, 0xee, 0xa4, 0xb8, 0x43, 0x65, 0xc5, 0x34,
	0x99, 0x48, 0x85, 0x64, 0x25, 0x6d, 0x06, 0x95, 0xa6, 0x8a, 0x4b, 0xe8, 0x3e, 0xec, 0x67, 0x92,
	0x42, 0xe9, 0x72, 0xeb, 0xef, 0x25, 0xb8, 0x39, 0x24, 0xdd, 0x68, 0x66, 0x3a, 0xe4, 0x51, 0x3d,
	0xc4, 0xce, 0x2b, 0x6b, 0x82, 0x51, 0x2f, 0x59, 0x38, 0x99, 0x1f, 0xba, 0x78, 0xe3, 0x57, 0xf7,
	0xb2, 0x89, 0xac, 0x97, 0x69, 0x6f, 0xa1, 0x9f, 0x91, 0x58, 0x8b, 0xef, 0x99, 0x48, 0xed, 0xba,
	0x2f, 0x45, 0x81, 0xe6, 0x77, 0xd6, 0xd2, 0x43, 0xe5, 0x3d, 0xd8, 0x12, 0x48, 0x68, 0x6f, 0xd3,
	0x97, 0x5b, 0x75, 0x7f, 0x0d, 0x55, 0xd4, 0x26, 0x3c, 0xfd, 0x44, 0x6d, 0xe9, 0x27, 0xaa, 0xa8,
	0x2d, 0xe3, 0xbd, 0x48, 0xb4, 0x9d, 0x90, 0x3a, 0x0a, 0x80, 0x2c, 0x52, 0x13, 0x3d, 0x57, 0x80,
	0xfb, 0xea, 0xdd, 0x4c, 0x5a, 0xa8, 0xe7, 0x33, 0xa8, 0x27, 0x46, 0x34, 0x3a, 0x88, 0x24, 0xb2,
	0x27, 0xbd, 0x7a, 0x7f, 0x03, 0x47, 0xa8, 0x99, 0x74, 0x3a, 0x86, 0x50, 0x90, 0xd0, 0xe7, 0x63,
	0x00, 0x49, 0x6d, 0xa6, 0x09, 0xa1, 0x78, 0x1f, 0x6e, 0x88, 0xd8, 0x16, 0xed, 0xa7, 0x2b, 0x41,
	0xc0, 0xcf, 0xea, 0xbd, 0x75, 0x64, 0xa1, 0x54, 0x1a, 0x49, 0x24, 0x88, 0xee, 0x67, 0x26, 0x4d,
	0x84, 0xb8, 0xaa, 0xb6, 0x89, 0x25, 0x54, 0xfe, 0xc2, 0x0f, 0x23, 0x65, 0xc0, 0x53, 0x36, 0xc4,
	0xd0, 0x3b, 0xa9, 0xe9, 0x16, 0x07, 0x35, 0xea, 0xc1, 0x7a, 0x86, 0x40, 0xef, 0x59, 0xc9, 0xff,
	0xdf, 0xb7, 0xc7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x89, 0x59, 0x25, 0x34, 0xb8, 0x1b, 0x00,
	0x00,
}
