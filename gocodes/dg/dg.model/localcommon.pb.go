// Code generated by protoc-gen-language.
// source: localcommon.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// -识别类型，1为车辆识别（机动车，非机动车，行人），2为人脸识别，3为先进行车辆识别，然后对车辆识别得到的对象进行人脸识别
type RecognizeType int32

const (
	RecognizeType_REC_TYPE_INVALID RecognizeType = 0
	RecognizeType_REC_TYPE_VEHICLE RecognizeType = 1
	RecognizeType_REC_TYPE_FACE    RecognizeType = 2
	RecognizeType_REC_TYPE_ALL     RecognizeType = 3
)

var RecognizeType_name = map[int32]string{
	0: "REC_TYPE_INVALID",
	1: "REC_TYPE_VEHICLE",
	2: "REC_TYPE_FACE",
	3: "REC_TYPE_ALL",
}
var RecognizeType_value = map[string]int32{
	"REC_TYPE_INVALID": 0,
	"REC_TYPE_VEHICLE": 1,
	"REC_TYPE_FACE":    2,
	"REC_TYPE_ALL":     3,
}

func (x RecognizeType) String() string {
	return proto.EnumName(RecognizeType_name, int32(x))
}
func (RecognizeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type RankType int32

const (
	RankType_RANK_TYPE_DEFAULT RankType = 0
	RankType_RANK_TYPE_VEHICLE RankType = 1
	RankType_RANK_TYPE_FACE    RankType = 2
)

var RankType_name = map[int32]string{
	0: "RANK_TYPE_DEFAULT",
	1: "RANK_TYPE_VEHICLE",
	2: "RANK_TYPE_FACE",
}
var RankType_value = map[string]int32{
	"RANK_TYPE_DEFAULT": 0,
	"RANK_TYPE_VEHICLE": 1,
	"RANK_TYPE_FACE":    2,
}

func (x RankType) String() string {
	return proto.EnumName(RankType_name, int32(x))
}
func (RankType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

// -识别的功能代码
type RecognizeFunctions int32

const (
	RecognizeFunctions_RECFUNC_INVALID                         RecognizeFunctions = 0
	RecognizeFunctions_RECFUNC_VEHICLE_DETECT                  RecognizeFunctions = 100
	RecognizeFunctions_RECFUNC_MOTOR_STYLE                     RecognizeFunctions = 101
	RecognizeFunctions_RECFUNC_MOTOR_COLOR                     RecognizeFunctions = 102
	RecognizeFunctions_RECFUNC_MOTOR_MARKER                    RecognizeFunctions = 103
	RecognizeFunctions_RECFUNC_MOTOR_PLATE                     RecognizeFunctions = 104
	RecognizeFunctions_RECFUNC_MOTOR_FEATURE                   RecognizeFunctions = 105
	RecognizeFunctions_RECFUNC_MOTOR_DRIVER_BELT               RecognizeFunctions = 106
	RecognizeFunctions_RECFUNC_MOTOR_DRIVER_PHONE              RecognizeFunctions = 107
	RecognizeFunctions_RECFUNC_MOTOR_CODRIVER_BELT             RecognizeFunctions = 108
	RecognizeFunctions_RECFUNC_MOTOR_DANGEROUS_ARTICLES_DETECT RecognizeFunctions = 109
	RecognizeFunctions_RECFUNC_FACE_DETECT                     RecognizeFunctions = 200
	RecognizeFunctions_RECFUNC_FACE_ALIGNMENT                  RecognizeFunctions = 201
	RecognizeFunctions_RECFUNC_FACE_QUALITY_LV1                RecognizeFunctions = 202
	RecognizeFunctions_RECFUNC_FACE_QUALITY_LV2                RecognizeFunctions = 203
	RecognizeFunctions_RECFUNC_FACE_FEATURE                    RecognizeFunctions = 204
	RecognizeFunctions_RECFUNC_FACE_ATTRIBUTE                  RecognizeFunctions = 205
	RecognizeFunctions_RECFUNC_PEDESTRIAN_ATTRIBUTE            RecognizeFunctions = 300
	RecognizeFunctions_RECFUNC_PEDESTRIAN_FEATURE              RecognizeFunctions = 301
	RecognizeFunctions_RECFUNC_NON_MOTOR_ATTRIBUTE             RecognizeFunctions = 400
)

var RecognizeFunctions_name = map[int32]string{
	0:   "RECFUNC_INVALID",
	100: "RECFUNC_VEHICLE_DETECT",
	101: "RECFUNC_MOTOR_STYLE",
	102: "RECFUNC_MOTOR_COLOR",
	103: "RECFUNC_MOTOR_MARKER",
	104: "RECFUNC_MOTOR_PLATE",
	105: "RECFUNC_MOTOR_FEATURE",
	106: "RECFUNC_MOTOR_DRIVER_BELT",
	107: "RECFUNC_MOTOR_DRIVER_PHONE",
	108: "RECFUNC_MOTOR_CODRIVER_BELT",
	109: "RECFUNC_MOTOR_DANGEROUS_ARTICLES_DETECT",
	200: "RECFUNC_FACE_DETECT",
	201: "RECFUNC_FACE_ALIGNMENT",
	202: "RECFUNC_FACE_QUALITY_LV1",
	203: "RECFUNC_FACE_QUALITY_LV2",
	204: "RECFUNC_FACE_FEATURE",
	205: "RECFUNC_FACE_ATTRIBUTE",
	300: "RECFUNC_PEDESTRIAN_ATTRIBUTE",
	301: "RECFUNC_PEDESTRIAN_FEATURE",
	400: "RECFUNC_NON_MOTOR_ATTRIBUTE",
}
var RecognizeFunctions_value = map[string]int32{
	"RECFUNC_INVALID":                         0,
	"RECFUNC_VEHICLE_DETECT":                  100,
	"RECFUNC_MOTOR_STYLE":                     101,
	"RECFUNC_MOTOR_COLOR":                     102,
	"RECFUNC_MOTOR_MARKER":                    103,
	"RECFUNC_MOTOR_PLATE":                     104,
	"RECFUNC_MOTOR_FEATURE":                   105,
	"RECFUNC_MOTOR_DRIVER_BELT":               106,
	"RECFUNC_MOTOR_DRIVER_PHONE":              107,
	"RECFUNC_MOTOR_CODRIVER_BELT":             108,
	"RECFUNC_MOTOR_DANGEROUS_ARTICLES_DETECT": 109,
	"RECFUNC_FACE_DETECT":                     200,
	"RECFUNC_FACE_ALIGNMENT":                  201,
	"RECFUNC_FACE_QUALITY_LV1":                202,
	"RECFUNC_FACE_QUALITY_LV2":                203,
	"RECFUNC_FACE_FEATURE":                    204,
	"RECFUNC_FACE_ATTRIBUTE":                  205,
	"RECFUNC_PEDESTRIAN_ATTRIBUTE":            300,
	"RECFUNC_PEDESTRIAN_FEATURE":              301,
	"RECFUNC_NON_MOTOR_ATTRIBUTE":             400,
}

func (x RecognizeFunctions) String() string {
	return proto.EnumName(RecognizeFunctions_name, int32(x))
}
func (RecognizeFunctions) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

type Time struct {
	Seconds  int64 `protobuf:"varint,1,opt,name=Seconds,json=seconds" json:"Seconds"`
	NanoSecs int64 `protobuf:"varint,2,opt,name=NanoSecs,json=nanoSecs" json:"NanoSecs"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *Time) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Time) GetNanoSecs() int64 {
	if m != nil {
		return m.NanoSecs
	}
	return 0
}

type MatrixError struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,json=code" json:"Code"`
	Message string `protobuf:"bytes,2,opt,name=Message,json=message" json:"Message"`
}

func (m *MatrixError) Reset()                    { *m = MatrixError{} }
func (m *MatrixError) String() string            { return proto.CompactTextString(m) }
func (*MatrixError) ProtoMessage()               {}
func (*MatrixError) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *MatrixError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MatrixError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Time)(nil), "dg.model.Time")
	proto.RegisterType((*MatrixError)(nil), "dg.model.MatrixError")
	proto.RegisterEnum("dg.model.RecognizeType", RecognizeType_name, RecognizeType_value)
	proto.RegisterEnum("dg.model.RankType", RankType_name, RankType_value)
	proto.RegisterEnum("dg.model.RecognizeFunctions", RecognizeFunctions_name, RecognizeFunctions_value)
}

func init() { proto.RegisterFile("localcommon.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x93, 0xdd, 0x72, 0xd2, 0x40,
	0x18, 0x86, 0x0d, 0xa0, 0xe0, 0xe7, 0xdf, 0xf2, 0x95, 0x2a, 0xa5, 0xfe, 0xd4, 0x9e, 0xe8, 0xe0,
	0x4c, 0x67, 0xd4, 0x43, 0x3d, 0xd9, 0x86, 0xa5, 0x65, 0x1a, 0x36, 0xb8, 0x6c, 0x98, 0xe1, 0x28,
	0x22, 0x44, 0xc4, 0x92, 0x6c, 0x27, 0xc1, 0x19, 0xf5, 0x2a, 0xbc, 0x10, 0xbd, 0x0f, 0x7f, 0x2f,
	0xc3, 0xfb, 0x70, 0x09, 0x84, 0x90, 0x96, 0xf1, 0x2c, 0xfb, 0x3d, 0xbb, 0xef, 0xbb, 0xfb, 0xcc,
	0x04, 0xca, 0x53, 0x35, 0x1c, 0x4c, 0x87, 0xca, 0xf7, 0x55, 0x70, 0x70, 0x16, 0xaa, 0x99, 0xc2,
	0xd2, 0x68, 0x7c, 0xe0, 0xab, 0x91, 0x37, 0xdd, 0x7f, 0x09, 0x05, 0x39, 0xf1, 0x3d, 0xac, 0x42,
	0xb1, 0xeb, 0x0d, 0x55, 0x30, 0x8a, 0xaa, 0xc6, 0x9e, 0xf1, 0x38, 0x2f, 0x8a, 0xd1, 0x62, 0x89,
	0x35, 0x28, 0xf1, 0x41, 0xa0, 0x34, 0x8d, 0xaa, 0xb9, 0x18, 0x95, 0x82, 0xe5, 0x7a, 0xff, 0x05,
	0x5c, 0x6b, 0x0f, 0x66, 0xe1, 0xe4, 0x23, 0x0b, 0x43, 0x15, 0x22, 0x42, 0xc1, 0xd4, 0xa9, 0x71,
	0xc2, 0x65, 0x51, 0x18, 0xea, 0xef, 0x79, 0x70, 0xdb, 0x8b, 0xa2, 0xc1, 0xd8, 0x8b, 0x4f, 0x5f,
	0x15, 0x45, 0x7f, 0xb1, 0xac, 0xbf, 0x86, 0x1b, 0x42, 0x77, 0x8c, 0x83, 0xc9, 0x67, 0x4f, 0x7e,
	0x3a, 0xf3, 0xb0, 0x02, 0x44, 0x30, 0xd3, 0x95, 0xfd, 0x0e, 0x73, 0x5b, 0xbc, 0x47, 0xad, 0x56,
	0x83, 0x5c, 0xca, 0x4c, 0x7b, 0xec, 0xb8, 0x65, 0x5a, 0x8c, 0x18, 0x58, 0xd6, 0x87, 0x93, 0x69,
	0x93, 0x9a, 0x8c, 0xe4, 0x90, 0xc0, 0xf5, 0xd5, 0x88, 0x5a, 0x16, 0xc9, 0xd7, 0x2d, 0x28, 0x89,
	0x41, 0x70, 0x1a, 0x87, 0x6f, 0x43, 0x59, 0x50, 0x7e, 0xb2, 0xc0, 0x0d, 0xd6, 0xa4, 0x8e, 0x25,
	0x75, 0x7a, 0x66, 0x9c, 0xc6, 0x23, 0xdc, 0x4c, 0xc7, 0x8b, 0xfc, 0xfa, 0xdf, 0x02, 0xe0, 0xea,
	0xc2, 0xcd, 0x0f, 0xc1, 0x70, 0x36, 0x51, 0x41, 0x84, 0x5b, 0x70, 0x4b, 0xd7, 0x36, 0x1d, 0x6e,
	0xae, 0x5d, 0xba, 0x06, 0xb7, 0x93, 0xe1, 0x32, 0x54, 0x77, 0x4a, 0x66, 0x4a, 0x32, 0xc2, 0x3b,
	0xb0, 0x95, 0xb0, 0xb6, 0x2d, 0x6d, 0xe1, 0x76, 0x65, 0x5f, 0x97, 0x7a, 0x17, 0x81, 0x69, 0x5b,
	0xb6, 0x20, 0x6f, 0xb5, 0xc3, 0x4a, 0x16, 0xb4, 0xa9, 0x38, 0x61, 0x82, 0x8c, 0x2f, 0x1e, 0xe9,
	0x58, 0x54, 0x32, 0xf2, 0x0e, 0x77, 0x60, 0x3b, 0x0b, 0x9a, 0x8c, 0x4a, 0x47, 0x30, 0x32, 0xc1,
	0x7b, 0xb0, 0x93, 0x45, 0x0d, 0xd1, 0xea, 0x31, 0xe1, 0x1e, 0x32, 0x6d, 0xe4, 0x3d, 0xde, 0x87,
	0xda, 0x46, 0xdc, 0x39, 0xb6, 0x39, 0x23, 0xa7, 0xf8, 0x00, 0x76, 0xcf, 0xdf, 0x72, 0x3d, 0x60,
	0x8a, 0x4f, 0xe0, 0xd1, 0xb9, 0x00, 0xca, 0x8f, 0x98, 0xb0, 0x9d, 0xae, 0x4b, 0x85, 0x9c, 0xbb,
	0xe8, 0x26, 0x32, 0x7c, 0xfd, 0xb4, 0xd5, 0x03, 0xe6, 0x9a, 0x13, 0xf0, 0xdd, 0xc0, 0xdd, 0x54,
	0x61, 0x4c, 0xb4, 0xd9, 0x23, 0xde, 0x66, 0x5c, 0x92, 0x1f, 0x86, 0x7e, 0x43, 0x35, 0x03, 0x5f,
	0x39, 0x1a, 0xcb, 0xbe, 0x6b, 0xf5, 0x9e, 0x92, 0x9f, 0xff, 0xc3, 0xcf, 0xc8, 0x2f, 0x43, 0xcb,
	0xa9, 0x64, 0x70, 0xe2, 0xe6, 0xf7, 0x86, 0x56, 0x29, 0x45, 0xeb, 0xd0, 0xd1, 0x4e, 0xff, 0x18,
	0xf8, 0x10, 0xee, 0x26, 0xb0, 0xc3, 0x1a, 0xac, 0xab, 0x11, 0xe5, 0x6b, 0x5b, 0xbe, 0xe6, 0xb4,
	0x9d, 0xda, 0x86, 0x2d, 0x49, 0xc1, 0xb7, 0x1c, 0xee, 0xa5, 0xfa, 0xb8, 0xcd, 0x97, 0x86, 0xd2,
	0x88, 0x2f, 0xf9, 0x37, 0x57, 0xe2, 0x7f, 0xf4, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c,
	0xcb, 0x44, 0x24, 0xb8, 0x03, 0x00, 0x00,
}
