// Code generated by protoc-gen-language.
// source: witness.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// -属性映射文件的id枚举
type IndexType int32

const (
	IndexType_INDEX_DEFAULT       IndexType = 0
	IndexType_INDEX_MOTOR         IndexType = 1
	IndexType_INDEX_NON_MOTOR     IndexType = 2
	IndexType_INDEX_PEDESTRIAN    IndexType = 3
	IndexType_INDEX_LICENSE_PLATE IndexType = 4
	IndexType_INDEX_FACE          IndexType = 5
	IndexType_INDEX_BRAND         IndexType = 6
)

var IndexType_name = map[int32]string{
	0: "INDEX_DEFAULT",
	1: "INDEX_MOTOR",
	2: "INDEX_NON_MOTOR",
	3: "INDEX_PEDESTRIAN",
	4: "INDEX_LICENSE_PLATE",
	5: "INDEX_FACE",
	6: "INDEX_BRAND",
}
var IndexType_value = map[string]int32{
	"INDEX_DEFAULT":       0,
	"INDEX_MOTOR":         1,
	"INDEX_NON_MOTOR":     2,
	"INDEX_PEDESTRIAN":    3,
	"INDEX_LICENSE_PLATE": 4,
	"INDEX_FACE":          5,
	"INDEX_BRAND":         6,
}

func (x IndexType) String() string {
	return proto.EnumName(IndexType_name, int32(x))
}
func (IndexType) EnumDescriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

// -用户自定义对象的类型
type WitnessUserObjectType int32

const (
	WitnessUserObjectType_WITNESS_USER_OBJECT_INVALID    WitnessUserObjectType = 0
	WitnessUserObjectType_WITNESS_USER_OBJECT_FACE       WitnessUserObjectType = 1
	WitnessUserObjectType_WITNESS_USER_OBJECT_MOTOR      WitnessUserObjectType = 2
	WitnessUserObjectType_WITNESS_USER_OBJECT_NONMOTOR   WitnessUserObjectType = 3
	WitnessUserObjectType_WITNESS_USER_OBJECT_PEDESTRIAN WitnessUserObjectType = 4
)

var WitnessUserObjectType_name = map[int32]string{
	0: "WITNESS_USER_OBJECT_INVALID",
	1: "WITNESS_USER_OBJECT_FACE",
	2: "WITNESS_USER_OBJECT_MOTOR",
	3: "WITNESS_USER_OBJECT_NONMOTOR",
	4: "WITNESS_USER_OBJECT_PEDESTRIAN",
}
var WitnessUserObjectType_value = map[string]int32{
	"WITNESS_USER_OBJECT_INVALID":    0,
	"WITNESS_USER_OBJECT_FACE":       1,
	"WITNESS_USER_OBJECT_MOTOR":      2,
	"WITNESS_USER_OBJECT_NONMOTOR":   3,
	"WITNESS_USER_OBJECT_PEDESTRIAN": 4,
}

func (x WitnessUserObjectType) String() string {
	return proto.EnumName(WitnessUserObjectType_name, int32(x))
}
func (WitnessUserObjectType) EnumDescriptor() ([]byte, []int) { return fileDescriptor20, []int{1} }

// -感兴趣区域（多边形）的坐标点类型
type WitnessPolygonROIType int32

const (
	WitnessPolygonROIType_INVALID    WitnessPolygonROIType = 0
	WitnessPolygonROIType_COORDINATE WitnessPolygonROIType = 1
	WitnessPolygonROIType_RATIO      WitnessPolygonROIType = 2
)

var WitnessPolygonROIType_name = map[int32]string{
	0: "INVALID",
	1: "COORDINATE",
	2: "RATIO",
}
var WitnessPolygonROIType_value = map[string]int32{
	"INVALID":    0,
	"COORDINATE": 1,
	"RATIO":      2,
}

func (x WitnessPolygonROIType) String() string {
	return proto.EnumName(WitnessPolygonROIType_name, int32(x))
}
func (WitnessPolygonROIType) EnumDescriptor() ([]byte, []int) { return fileDescriptor20, []int{2} }

// -用户自定义对象，目前版本只支持人脸
type WitnessUserObject struct {
	// -对象类型，参见枚举WitnessUserObjectType
	Type WitnessUserObjectType `protobuf:"varint,1,opt,name=Type,json=type,enum=dg.model.WitnessUserObjectType" json:"Type"`
	// -对象坐标（带角度的rect）,由face detect获得
	RotatedRect *RotatedRect `protobuf:"bytes,2,opt,name=RotatedRect,json=rotatedRect" json:"RotatedRect"`
	// -人脸的align结果，由face align获得
	AlignResult *FaceAlignResult `protobuf:"bytes,3,opt,name=AlignResult,json=alignResult" json:"AlignResult"`
	// -对象坐标（矩形rect）
	Rect *Rect `protobuf:"bytes,4,opt,name=Rect,json=rect" json:"Rect"`
}

func (m *WitnessUserObject) Reset()                    { *m = WitnessUserObject{} }
func (m *WitnessUserObject) String() string            { return proto.CompactTextString(m) }
func (*WitnessUserObject) ProtoMessage()               {}
func (*WitnessUserObject) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

func (m *WitnessUserObject) GetType() WitnessUserObjectType {
	if m != nil {
		return m.Type
	}
	return WitnessUserObjectType_WITNESS_USER_OBJECT_INVALID
}

func (m *WitnessUserObject) GetRotatedRect() *RotatedRect {
	if m != nil {
		return m.RotatedRect
	}
	return nil
}

func (m *WitnessUserObject) GetAlignResult() *FaceAlignResult {
	if m != nil {
		return m.AlignResult
	}
	return nil
}

func (m *WitnessUserObject) GetRect() *Rect {
	if m != nil {
		return m.Rect
	}
	return nil
}

// -请求属性映射json，目前不可用
type IndexRequest struct {
	// -属性映射json的id，参见枚举IndexType
	IndexType IndexType `protobuf:"varint,1,opt,name=IndexType,json=indexType,enum=dg.model.IndexType" json:"IndexType"`
}

func (m *IndexRequest) Reset()                    { *m = IndexRequest{} }
func (m *IndexRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexRequest) ProtoMessage()               {}
func (*IndexRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{1} }

func (m *IndexRequest) GetIndexType() IndexType {
	if m != nil {
		return m.IndexType
	}
	return IndexType_INDEX_DEFAULT
}

// -请求属性映射文件
type IndexTxtRequest struct {
	// -属性映射文件的id，参见枚举IndexType
	IndexType IndexType `protobuf:"varint,1,opt,name=IndexType,json=indexType,enum=dg.model.IndexType" json:"IndexType"`
}

func (m *IndexTxtRequest) Reset()                    { *m = IndexTxtRequest{} }
func (m *IndexTxtRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexTxtRequest) ProtoMessage()               {}
func (*IndexTxtRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{2} }

func (m *IndexTxtRequest) GetIndexType() IndexType {
	if m != nil {
		return m.IndexType
	}
	return IndexType_INDEX_DEFAULT
}

// -请求属性映射文件的响应
type IndexTxtResponse struct {
	// -属性映射文件的内容(json)
	Context string `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
}

func (m *IndexTxtResponse) Reset()                    { *m = IndexTxtResponse{} }
func (m *IndexTxtResponse) String() string            { return proto.CompactTextString(m) }
func (*IndexTxtResponse) ProtoMessage()               {}
func (*IndexTxtResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{3} }

func (m *IndexTxtResponse) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// -ignored
type CommonIndex struct {
	Items []*CommonIndex_Item `protobuf:"bytes,1,rep,name=Items,json=items" json:"Items"`
}

func (m *CommonIndex) Reset()                    { *m = CommonIndex{} }
func (m *CommonIndex) String() string            { return proto.CompactTextString(m) }
func (*CommonIndex) ProtoMessage()               {}
func (*CommonIndex) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{4} }

func (m *CommonIndex) GetItems() []*CommonIndex_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type CommonIndex_Item struct {
	Id   int32  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	Name string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name"`
}

func (m *CommonIndex_Item) Reset()                    { *m = CommonIndex_Item{} }
func (m *CommonIndex_Item) String() string            { return proto.CompactTextString(m) }
func (*CommonIndex_Item) ProtoMessage()               {}
func (*CommonIndex_Item) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{4, 0} }

func (m *CommonIndex_Item) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommonIndex_Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// -ignored
type BrandIndex struct {
	Items []*BrandIndex_Item `protobuf:"bytes,1,rep,name=Items,json=items" json:"Items"`
}

func (m *BrandIndex) Reset()                    { *m = BrandIndex{} }
func (m *BrandIndex) String() string            { return proto.CompactTextString(m) }
func (*BrandIndex) ProtoMessage()               {}
func (*BrandIndex) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{5} }

func (m *BrandIndex) GetItems() []*BrandIndex_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type BrandIndex_Item struct {
	MainBrandId   int32  `protobuf:"varint,2,opt,name=MainBrandId,json=mainBrandId" json:"MainBrandId"`
	SubBrandId    int32  `protobuf:"varint,3,opt,name=SubBrandId,json=subBrandId" json:"SubBrandId"`
	YearModelId   int32  `protobuf:"varint,4,opt,name=YearModelId,json=yearModelId" json:"YearModelId"`
	MainBrandName string `protobuf:"bytes,5,opt,name=MainBrandName,json=mainBrandName" json:"MainBrandName"`
	SubBrandName  string `protobuf:"bytes,6,opt,name=SubBrandName,json=subBrandName" json:"SubBrandName"`
	YearModelName string `protobuf:"bytes,7,opt,name=YearModelName,json=yearModelName" json:"YearModelName"`
}

func (m *BrandIndex_Item) Reset()                    { *m = BrandIndex_Item{} }
func (m *BrandIndex_Item) String() string            { return proto.CompactTextString(m) }
func (*BrandIndex_Item) ProtoMessage()               {}
func (*BrandIndex_Item) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{5, 0} }

func (m *BrandIndex_Item) GetMainBrandId() int32 {
	if m != nil {
		return m.MainBrandId
	}
	return 0
}

func (m *BrandIndex_Item) GetSubBrandId() int32 {
	if m != nil {
		return m.SubBrandId
	}
	return 0
}

func (m *BrandIndex_Item) GetYearModelId() int32 {
	if m != nil {
		return m.YearModelId
	}
	return 0
}

func (m *BrandIndex_Item) GetMainBrandName() string {
	if m != nil {
		return m.MainBrandName
	}
	return ""
}

func (m *BrandIndex_Item) GetSubBrandName() string {
	if m != nil {
		return m.SubBrandName
	}
	return ""
}

func (m *BrandIndex_Item) GetYearModelName() string {
	if m != nil {
		return m.YearModelName
	}
	return ""
}

// -ignored
type IndexResponse struct {
	// Types that are valid to be assigned to IndexContent:
	//	*IndexResponse_Index
	//	*IndexResponse_BrandIndex
	IndexContent isIndexResponse_IndexContent `protobuf_oneof:"index_content"`
}

func (m *IndexResponse) Reset()                    { *m = IndexResponse{} }
func (m *IndexResponse) String() string            { return proto.CompactTextString(m) }
func (*IndexResponse) ProtoMessage()               {}
func (*IndexResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{6} }

type isIndexResponse_IndexContent interface {
	isIndexResponse_IndexContent()
}

type IndexResponse_Index struct {
	Index *CommonIndex `protobuf:"bytes,1,opt,name=Index,json=index,oneof"`
}
type IndexResponse_BrandIndex struct {
	BrandIndex *BrandIndex `protobuf:"bytes,2,opt,name=BrandIndex,json=brandIndex,oneof"`
}

func (*IndexResponse_Index) isIndexResponse_IndexContent()      {}
func (*IndexResponse_BrandIndex) isIndexResponse_IndexContent() {}

func (m *IndexResponse) GetIndexContent() isIndexResponse_IndexContent {
	if m != nil {
		return m.IndexContent
	}
	return nil
}

func (m *IndexResponse) GetIndex() *CommonIndex {
	if x, ok := m.GetIndexContent().(*IndexResponse_Index); ok {
		return x.Index
	}
	return nil
}

func (m *IndexResponse) GetBrandIndex() *BrandIndex {
	if x, ok := m.GetIndexContent().(*IndexResponse_BrandIndex); ok {
		return x.BrandIndex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IndexResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IndexResponse_OneofMarshaler, _IndexResponse_OneofUnmarshaler, _IndexResponse_OneofSizer, []interface{}{
		(*IndexResponse_Index)(nil),
		(*IndexResponse_BrandIndex)(nil),
	}
}

func _IndexResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IndexResponse)
	// index_content
	switch x := m.IndexContent.(type) {
	case *IndexResponse_Index:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Index); err != nil {
			return err
		}
	case *IndexResponse_BrandIndex:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BrandIndex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IndexResponse.IndexContent has unexpected type %T", x)
	}
	return nil
}

func _IndexResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IndexResponse)
	switch tag {
	case 1: // index_content.Index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommonIndex)
		err := b.DecodeMessage(msg)
		m.IndexContent = &IndexResponse_Index{msg}
		return true, err
	case 2: // index_content.BrandIndex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BrandIndex)
		err := b.DecodeMessage(msg)
		m.IndexContent = &IndexResponse_BrandIndex{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IndexResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IndexResponse)
	// index_content
	switch x := m.IndexContent.(type) {
	case *IndexResponse_Index:
		s := proto.Size(x.Index)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IndexResponse_BrandIndex:
		s := proto.Size(x.BrandIndex)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// -请求属性映射表的版本号
type IndexVersionRequest struct {
}

func (m *IndexVersionRequest) Reset()                    { *m = IndexVersionRequest{} }
func (m *IndexVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexVersionRequest) ProtoMessage()               {}
func (*IndexVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{7} }

// -请求属性映射表的版本号的响应
type IndexVersionResponse struct {
	// -属性映射表的版本号
	Version string `protobuf:"bytes,1,opt,name=Version,json=version" json:"Version"`
}

func (m *IndexVersionResponse) Reset()                    { *m = IndexVersionResponse{} }
func (m *IndexVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*IndexVersionResponse) ProtoMessage()               {}
func (*IndexVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{8} }

func (m *IndexVersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// -witness单请求
type WitnessRequest struct {
	// -witness的请求上下文
	Context *WitnessRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -witness的图片（一张）
	Image *WitnessImage `protobuf:"bytes,2,opt,name=Image,json=image" json:"Image"`
}

func (m *WitnessRequest) Reset()                    { *m = WitnessRequest{} }
func (m *WitnessRequest) String() string            { return proto.CompactTextString(m) }
func (*WitnessRequest) ProtoMessage()               {}
func (*WitnessRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{9} }

func (m *WitnessRequest) GetContext() *WitnessRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessRequest) GetImage() *WitnessImage {
	if m != nil {
		return m.Image
	}
	return nil
}

// -witness多请求
type WitnessBatchRequest struct {
	// -witness的请求上下文
	Context *WitnessRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -witness的图片（一张或多张）
	Images []*WitnessImage `protobuf:"bytes,2,rep,name=Images,json=images" json:"Images"`
}

func (m *WitnessBatchRequest) Reset()                    { *m = WitnessBatchRequest{} }
func (m *WitnessBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WitnessBatchRequest) ProtoMessage()               {}
func (*WitnessBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{10} }

func (m *WitnessBatchRequest) GetContext() *WitnessRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessBatchRequest) GetImages() []*WitnessImage {
	if m != nil {
		return m.Images
	}
	return nil
}

// -witness单请求的响应
type WitnessResponse struct {
	// -witness的响应上下文
	Context *WitnessResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -witness结果（一个）
	Result *WitnessResult `protobuf:"bytes,2,opt,name=Result,json=result" json:"Result"`
}

func (m *WitnessResponse) Reset()                    { *m = WitnessResponse{} }
func (m *WitnessResponse) String() string            { return proto.CompactTextString(m) }
func (*WitnessResponse) ProtoMessage()               {}
func (*WitnessResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{11} }

func (m *WitnessResponse) GetContext() *WitnessResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessResponse) GetResult() *WitnessResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// -witness多请求的响应
type WitnessBatchResponse struct {
	// -witness的响应上下文
	Context *WitnessResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context"`
	// -witness结果（多个）
	Results []*WitnessResult `protobuf:"bytes,2,rep,name=Results,json=results" json:"Results"`
}

func (m *WitnessBatchResponse) Reset()                    { *m = WitnessBatchResponse{} }
func (m *WitnessBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*WitnessBatchResponse) ProtoMessage()               {}
func (*WitnessBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{12} }

func (m *WitnessBatchResponse) GetContext() *WitnessResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessBatchResponse) GetResults() []*WitnessResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// -感兴趣区域（矩形）
type WitnessRelativeROI struct {
	PosX   int32 `protobuf:"varint,1,opt,name=PosX,json=posX" json:"PosX"`
	PosY   int32 `protobuf:"varint,2,opt,name=PosY,json=posY" json:"PosY"`
	Width  int32 `protobuf:"varint,3,opt,name=Width,json=width" json:"Width"`
	Height int32 `protobuf:"varint,4,opt,name=Height,json=height" json:"Height"`
}

func (m *WitnessRelativeROI) Reset()                    { *m = WitnessRelativeROI{} }
func (m *WitnessRelativeROI) String() string            { return proto.CompactTextString(m) }
func (*WitnessRelativeROI) ProtoMessage()               {}
func (*WitnessRelativeROI) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{13} }

func (m *WitnessRelativeROI) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *WitnessRelativeROI) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *WitnessRelativeROI) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *WitnessRelativeROI) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// -感兴趣区域（矩形）
type WitnessMarginROI struct {
	Left   int32 `protobuf:"varint,1,opt,name=Left,json=left" json:"Left"`
	Top    int32 `protobuf:"varint,2,opt,name=Top,json=top" json:"Top"`
	Right  int32 `protobuf:"varint,3,opt,name=Right,json=right" json:"Right"`
	Bottom int32 `protobuf:"varint,4,opt,name=Bottom,json=bottom" json:"Bottom"`
}

func (m *WitnessMarginROI) Reset()                    { *m = WitnessMarginROI{} }
func (m *WitnessMarginROI) String() string            { return proto.CompactTextString(m) }
func (*WitnessMarginROI) ProtoMessage()               {}
func (*WitnessMarginROI) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{14} }

func (m *WitnessMarginROI) GetLeft() int32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *WitnessMarginROI) GetTop() int32 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *WitnessMarginROI) GetRight() int32 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *WitnessMarginROI) GetBottom() int32 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

// -感兴趣区域（多边形）
type WitnessPolygonROI struct {
	// -感兴趣区域（多边形）的坐标点类型，参见枚举WitnessPolygonROIType
	PointType WitnessPolygonROIType `protobuf:"varint,1,opt,name=PointType,json=pointType,enum=dg.model.WitnessPolygonROIType" json:"PointType"`
	// -过滤阈值，范围:[0.00, 1.00]，目标在多边形中的面积占目标整体面积的比例小于此比例时，目标将被过滤掉
	FilterThreshold float32 `protobuf:"fixed32,2,opt,name=FilterThreshold,json=filterThreshold" json:"FilterThreshold"`
	// -表示多边形的点
	Points []*PointF `protobuf:"bytes,3,rep,name=Points,json=points" json:"Points"`
}

func (m *WitnessPolygonROI) Reset()                    { *m = WitnessPolygonROI{} }
func (m *WitnessPolygonROI) String() string            { return proto.CompactTextString(m) }
func (*WitnessPolygonROI) ProtoMessage()               {}
func (*WitnessPolygonROI) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{15} }

func (m *WitnessPolygonROI) GetPointType() WitnessPolygonROIType {
	if m != nil {
		return m.PointType
	}
	return WitnessPolygonROIType_INVALID
}

func (m *WitnessPolygonROI) GetFilterThreshold() float32 {
	if m != nil {
		return m.FilterThreshold
	}
	return 0
}

func (m *WitnessPolygonROI) GetPoints() []*PointF {
	if m != nil {
		return m.Points
	}
	return nil
}

// -witness请求的上下文(input)
type WitnessRequestContext struct {
	// -请求的Session，用户指定，可以为空
	SessionId string `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId"`
	// -用户名信息，需要开启验证功能
	UserName string `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName"`
	// -Token验证，需要开启验证功能
	Token string `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token"`
	// -功能列表，参见枚举RecognizeFunctions
	Functions []int32 `protobuf:"varint,4,rep,packed,name=Functions,json=functions" json:"Functions"`
	// -识别类型，参见枚举RecognizeType
	Type int32 `protobuf:"varint,5,opt,name=Type,json=type" json:"Type"`
	// -witness结果存储的信息，弃用字段
	Storages []*StorageConfig `protobuf:"bytes,6,rep,name=Storages,json=storages" json:"Storages"`
	// -扩展参数，目前未使用
	Params map[string]string `protobuf:"bytes,7,rep,name=Params,json=params" json:"Params" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// -最小人脸，单位像素
	MinFaceSize int32 `protobuf:"varint,8,opt,name=MinFaceSize,json=minFaceSize" json:"MinFaceSize"`
	// -最大人脸，单位像素
	MaxFaceSize int32 `protobuf:"varint,9,opt,name=MaxFaceSize,json=maxFaceSize" json:"MaxFaceSize"`
}

func (m *WitnessRequestContext) Reset()                    { *m = WitnessRequestContext{} }
func (m *WitnessRequestContext) String() string            { return proto.CompactTextString(m) }
func (*WitnessRequestContext) ProtoMessage()               {}
func (*WitnessRequestContext) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{16} }

func (m *WitnessRequestContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *WitnessRequestContext) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *WitnessRequestContext) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *WitnessRequestContext) GetFunctions() []int32 {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *WitnessRequestContext) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *WitnessRequestContext) GetStorages() []*StorageConfig {
	if m != nil {
		return m.Storages
	}
	return nil
}

func (m *WitnessRequestContext) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *WitnessRequestContext) GetMinFaceSize() int32 {
	if m != nil {
		return m.MinFaceSize
	}
	return 0
}

func (m *WitnessRequestContext) GetMaxFaceSize() int32 {
	if m != nil {
		return m.MaxFaceSize
	}
	return 0
}

// -witness图片(input)
type WitnessImage struct {
	// -图片信息
	Data *Image `protobuf:"bytes,1,opt,name=Data,json=data" json:"Data"`
	// -用户的MetaData，不建议使用，后续版本此字段将移除
	WitnessMetaData *SrcMetadata `protobuf:"bytes,2,opt,name=WitnessMetaData,json=witnessMetaData" json:"WitnessMetaData"`
	// -感兴趣区域(矩形)
	RelativeRoi []*WitnessRelativeROI `protobuf:"bytes,3,rep,name=RelativeRoi,json=relativeRoi" json:"RelativeRoi"`
	// -感兴趣区域(矩形)，不建议使用，后续版本此字段将移除
	MarginRoi []*WitnessMarginROI `protobuf:"bytes,4,rep,name=MarginRoi,json=marginRoi" json:"MarginRoi"`
	// -用户的指定的对象，目前只支持人脸对象
	UserObject []*WitnessUserObject `protobuf:"bytes,5,rep,name=UserObject,json=userObject" json:"UserObject"`
	// -感兴趣区域(多边形)
	PolygonRoi []*WitnessPolygonROI `protobuf:"bytes,6,rep,name=PolygonRoi,json=polygonRoi" json:"PolygonRoi"`
}

func (m *WitnessImage) Reset()                    { *m = WitnessImage{} }
func (m *WitnessImage) String() string            { return proto.CompactTextString(m) }
func (*WitnessImage) ProtoMessage()               {}
func (*WitnessImage) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{17} }

func (m *WitnessImage) GetData() *Image {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *WitnessImage) GetWitnessMetaData() *SrcMetadata {
	if m != nil {
		return m.WitnessMetaData
	}
	return nil
}

func (m *WitnessImage) GetRelativeRoi() []*WitnessRelativeROI {
	if m != nil {
		return m.RelativeRoi
	}
	return nil
}

func (m *WitnessImage) GetMarginRoi() []*WitnessMarginROI {
	if m != nil {
		return m.MarginRoi
	}
	return nil
}

func (m *WitnessImage) GetUserObject() []*WitnessUserObject {
	if m != nil {
		return m.UserObject
	}
	return nil
}

func (m *WitnessImage) GetPolygonRoi() []*WitnessPolygonROI {
	if m != nil {
		return m.PolygonRoi
	}
	return nil
}

// -witness响应的上下文(output)
type WitnessResponseContext struct {
	// -响应的Session，如果请求时Session不存在，否则为空
	SessionId string `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId"`
	// -响应状态
	Status string `protobuf:"bytes,2,opt,name=Status,json=status" json:"Status"`
	// -响应状态的具体描述
	Message string `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message"`
	// -请求下发给witness的时间
	RequestTs *Time `protobuf:"bytes,4,opt,name=RequestTs,json=requestTs" json:"RequestTs"`
	// -从witness读取内容的时间
	ResponseTs *Time `protobuf:"bytes,5,opt,name=ResponseTs,json=responseTs" json:"ResponseTs"`
	// -Debug字段，不建议使用，后续版本此字段将移除
	DebugTs map[string]*Time `protobuf:"bytes,6,rep,name=DebugTs,json=debugTs" json:"DebugTs" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WitnessResponseContext) Reset()                    { *m = WitnessResponseContext{} }
func (m *WitnessResponseContext) String() string            { return proto.CompactTextString(m) }
func (*WitnessResponseContext) ProtoMessage()               {}
func (*WitnessResponseContext) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{18} }

func (m *WitnessResponseContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *WitnessResponseContext) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *WitnessResponseContext) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *WitnessResponseContext) GetRequestTs() *Time {
	if m != nil {
		return m.RequestTs
	}
	return nil
}

func (m *WitnessResponseContext) GetResponseTs() *Time {
	if m != nil {
		return m.ResponseTs
	}
	return nil
}

func (m *WitnessResponseContext) GetDebugTs() map[string]*Time {
	if m != nil {
		return m.DebugTs
	}
	return nil
}

// -witness结果(output)
type WitnessResult struct {
	// -响应的状态，"200"为正常，其他为异常
	InnerStatus string `protobuf:"bytes,1,opt,name=InnerStatus,json=innerStatus" json:"InnerStatus"`
	// -响应的具体信息，正常响应时为success，其他情况下为异常的具体信息
	InnerMessage string `protobuf:"bytes,2,opt,name=InnerMessage,json=innerMessage" json:"InnerMessage"`
	// -响应的图片信息
	Image *WitnessImage `protobuf:"bytes,3,opt,name=Image,json=image" json:"Image"`
	// -识别到的机动车
	Vehicles []*RecVehicle `protobuf:"bytes,4,rep,name=Vehicles,json=vehicles" json:"Vehicles"`
	// -识别到的行人
	Pedestrian []*RecPedestrian `protobuf:"bytes,5,rep,name=Pedestrian,json=pedestrian" json:"Pedestrian"`
	// -识别到的非机动车
	NonMotorVehicles []*RecNonMotorVehicle `protobuf:"bytes,6,rep,name=NonMotorVehicles,json=nonMotorVehicles" json:"NonMotorVehicles"`
	// -识别到的人脸
	Faces []*RecFace `protobuf:"bytes,7,rep,name=Faces,json=faces" json:"Faces"`
}

func (m *WitnessResult) Reset()                    { *m = WitnessResult{} }
func (m *WitnessResult) String() string            { return proto.CompactTextString(m) }
func (*WitnessResult) ProtoMessage()               {}
func (*WitnessResult) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{19} }

func (m *WitnessResult) GetInnerStatus() string {
	if m != nil {
		return m.InnerStatus
	}
	return ""
}

func (m *WitnessResult) GetInnerMessage() string {
	if m != nil {
		return m.InnerMessage
	}
	return ""
}

func (m *WitnessResult) GetImage() *WitnessImage {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *WitnessResult) GetVehicles() []*RecVehicle {
	if m != nil {
		return m.Vehicles
	}
	return nil
}

func (m *WitnessResult) GetPedestrian() []*RecPedestrian {
	if m != nil {
		return m.Pedestrian
	}
	return nil
}

func (m *WitnessResult) GetNonMotorVehicles() []*RecNonMotorVehicle {
	if m != nil {
		return m.NonMotorVehicles
	}
	return nil
}

func (m *WitnessResult) GetFaces() []*RecFace {
	if m != nil {
		return m.Faces
	}
	return nil
}

func init() {
	proto.RegisterType((*WitnessUserObject)(nil), "dg.model.WitnessUserObject")
	proto.RegisterType((*IndexRequest)(nil), "dg.model.IndexRequest")
	proto.RegisterType((*IndexTxtRequest)(nil), "dg.model.IndexTxtRequest")
	proto.RegisterType((*IndexTxtResponse)(nil), "dg.model.IndexTxtResponse")
	proto.RegisterType((*CommonIndex)(nil), "dg.model.CommonIndex")
	proto.RegisterType((*CommonIndex_Item)(nil), "dg.model.CommonIndex.Item")
	proto.RegisterType((*BrandIndex)(nil), "dg.model.BrandIndex")
	proto.RegisterType((*BrandIndex_Item)(nil), "dg.model.BrandIndex.Item")
	proto.RegisterType((*IndexResponse)(nil), "dg.model.IndexResponse")
	proto.RegisterType((*IndexVersionRequest)(nil), "dg.model.IndexVersionRequest")
	proto.RegisterType((*IndexVersionResponse)(nil), "dg.model.IndexVersionResponse")
	proto.RegisterType((*WitnessRequest)(nil), "dg.model.WitnessRequest")
	proto.RegisterType((*WitnessBatchRequest)(nil), "dg.model.WitnessBatchRequest")
	proto.RegisterType((*WitnessResponse)(nil), "dg.model.WitnessResponse")
	proto.RegisterType((*WitnessBatchResponse)(nil), "dg.model.WitnessBatchResponse")
	proto.RegisterType((*WitnessRelativeROI)(nil), "dg.model.WitnessRelativeROI")
	proto.RegisterType((*WitnessMarginROI)(nil), "dg.model.WitnessMarginROI")
	proto.RegisterType((*WitnessPolygonROI)(nil), "dg.model.WitnessPolygonROI")
	proto.RegisterType((*WitnessRequestContext)(nil), "dg.model.WitnessRequestContext")
	proto.RegisterType((*WitnessImage)(nil), "dg.model.WitnessImage")
	proto.RegisterType((*WitnessResponseContext)(nil), "dg.model.WitnessResponseContext")
	proto.RegisterType((*WitnessResult)(nil), "dg.model.WitnessResult")
	proto.RegisterEnum("dg.model.IndexType", IndexType_name, IndexType_value)
	proto.RegisterEnum("dg.model.WitnessUserObjectType", WitnessUserObjectType_name, WitnessUserObjectType_value)
	proto.RegisterEnum("dg.model.WitnessPolygonROIType", WitnessPolygonROIType_name, WitnessPolygonROIType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for WitnessService service

type WitnessServiceClient interface {
	Recognize(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error)
	BatchRecognize(ctx context.Context, in *WitnessBatchRequest, opts ...grpc.CallOption) (*WitnessBatchResponse, error)
	GetIndex(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error)
	GetIndexTxt(ctx context.Context, in *IndexTxtRequest, opts ...grpc.CallOption) (*IndexTxtResponse, error)
	GetIndexVersion(ctx context.Context, in *IndexVersionRequest, opts ...grpc.CallOption) (*IndexVersionResponse, error)
}

type witnessServiceClient struct {
	cc *grpc.ClientConn
}

func NewWitnessServiceClient(cc *grpc.ClientConn) WitnessServiceClient {
	return &witnessServiceClient{cc}
}

func (c *witnessServiceClient) Recognize(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error) {
	out := new(WitnessResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/Recognize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) BatchRecognize(ctx context.Context, in *WitnessBatchRequest, opts ...grpc.CallOption) (*WitnessBatchResponse, error) {
	out := new(WitnessBatchResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/BatchRecognize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) GetIndex(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error) {
	out := new(IndexResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/GetIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) GetIndexTxt(ctx context.Context, in *IndexTxtRequest, opts ...grpc.CallOption) (*IndexTxtResponse, error) {
	out := new(IndexTxtResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/GetIndexTxt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) GetIndexVersion(ctx context.Context, in *IndexVersionRequest, opts ...grpc.CallOption) (*IndexVersionResponse, error) {
	out := new(IndexVersionResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/GetIndexVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WitnessService service

type WitnessServiceServer interface {
	Recognize(context.Context, *WitnessRequest) (*WitnessResponse, error)
	BatchRecognize(context.Context, *WitnessBatchRequest) (*WitnessBatchResponse, error)
	GetIndex(context.Context, *IndexRequest) (*IndexResponse, error)
	GetIndexTxt(context.Context, *IndexTxtRequest) (*IndexTxtResponse, error)
	GetIndexVersion(context.Context, *IndexVersionRequest) (*IndexVersionResponse, error)
}

func RegisterWitnessServiceServer(s *grpc.Server, srv WitnessServiceServer) {
	s.RegisterService(&_WitnessService_serviceDesc, srv)
}

func _WitnessService_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/Recognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).Recognize(ctx, req.(*WitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_BatchRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).BatchRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/BatchRecognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).BatchRecognize(ctx, req.(*WitnessBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/GetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).GetIndex(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_GetIndexTxt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexTxtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).GetIndexTxt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/GetIndexTxt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).GetIndexTxt(ctx, req.(*IndexTxtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_GetIndexVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).GetIndexVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/GetIndexVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).GetIndexVersion(ctx, req.(*IndexVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WitnessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dg.model.WitnessService",
	HandlerType: (*WitnessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _WitnessService_Recognize_Handler,
		},
		{
			MethodName: "BatchRecognize",
			Handler:    _WitnessService_BatchRecognize_Handler,
		},
		{
			MethodName: "GetIndex",
			Handler:    _WitnessService_GetIndex_Handler,
		},
		{
			MethodName: "GetIndexTxt",
			Handler:    _WitnessService_GetIndexTxt_Handler,
		},
		{
			MethodName: "GetIndexVersion",
			Handler:    _WitnessService_GetIndexVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "witness.proto",
}

func init() { proto.RegisterFile("witness.proto", fileDescriptor20) }

var fileDescriptor20 = []byte{
	// 1654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0x4b, 0x6f, 0x1b, 0x47,
	0x12, 0x16, 0xdf, 0x9c, 0xa2, 0x24, 0x52, 0x2d, 0x59, 0x0f, 0x5a, 0xb6, 0x85, 0x59, 0x03, 0x6b,
	0x68, 0x6d, 0xfa, 0x05, 0xec, 0xda, 0x5e, 0x78, 0x0d, 0x4a, 0xa4, 0x6c, 0x1a, 0x12, 0xa9, 0x6d,
	0xd2, 0xaf, 0x93, 0x30, 0x22, 0x5b, 0xd4, 0xd8, 0xe4, 0x0c, 0x77, 0xa6, 0x29, 0x4b, 0x7b, 0x58,
	0x2c, 0x02, 0x04, 0xb9, 0x07, 0x39, 0xe5, 0x07, 0xe4, 0x4f, 0xe4, 0x9f, 0x24, 0xa7, 0xe4, 0x94,
	0x9f, 0x91, 0xea, 0x9e, 0x9e, 0x07, 0xc9, 0x91, 0x1d, 0x20, 0xbe, 0x88, 0x53, 0x55, 0x5f, 0x55,
	0x75, 0x57, 0x57, 0x75, 0x55, 0x0b, 0x16, 0x3e, 0x9a, 0xdc, 0x62, 0xae, 0x5b, 0x19, 0x39, 0x36,
	0xb7, 0x49, 0xbe, 0xd7, 0xaf, 0x0c, 0xed, 0x1e, 0x1b, 0x94, 0xe7, 0xbb, 0xf6, 0x70, 0x68, 0x5b,
	0x1e, 0xbf, 0xbc, 0x34, 0xb0, 0xbb, 0xc6, 0x20, 0xca, 0xd2, 0x7f, 0x4d, 0xc0, 0xd2, 0x1b, 0x4f,
	0xf9, 0x95, 0xcb, 0x9c, 0xd6, 0xf1, 0x7b, 0xd6, 0xe5, 0xe4, 0x21, 0xa4, 0x3b, 0x17, 0x23, 0xb6,
	0x9e, 0xd8, 0x4a, 0xdc, 0x5a, 0x7c, 0x70, 0xa3, 0xe2, 0xdb, 0xab, 0xcc, 0x40, 0x05, 0x8c, 0xa6,
	0x39, 0xfe, 0x25, 0xff, 0x80, 0x02, 0xb5, 0xb9, 0xc1, 0x59, 0x8f, 0xa2, 0x60, 0x3d, 0x89, 0xba,
	0x85, 0x07, 0x57, 0x42, 0xdd, 0x88, 0x90, 0x16, 0x9c, 0x90, 0x20, 0xff, 0x84, 0x42, 0x75, 0x60,
	0xf6, 0x2d, 0xca, 0xdc, 0xf1, 0x80, 0xaf, 0xa7, 0xa4, 0xe2, 0x46, 0xa8, 0xb8, 0x67, 0x74, 0x59,
	0x04, 0x40, 0x0b, 0x46, 0x48, 0x10, 0x1d, 0xd2, 0xd2, 0x5d, 0x5a, 0x6a, 0x2d, 0x46, 0xdc, 0x09,
	0x3f, 0x69, 0x07, 0xff, 0xea, 0x55, 0x98, 0x6f, 0x58, 0x3d, 0x76, 0x4e, 0xd9, 0x7f, 0xc6, 0xcc,
	0xe5, 0xe4, 0x3e, 0x68, 0x92, 0x8e, 0xec, 0x71, 0x39, 0x54, 0x0c, 0x44, 0x54, 0x33, 0xfd, 0x4f,
	0xbd, 0x06, 0x45, 0x8f, 0x7f, 0xce, 0xff, 0x84, 0x95, 0xdb, 0x50, 0x0a, 0xad, 0xb8, 0x23, 0xdb,
	0x72, 0x19, 0x59, 0x87, 0xdc, 0xae, 0x6d, 0x71, 0x76, 0xce, 0xa5, 0x11, 0x8d, 0xe6, 0xba, 0x1e,
	0xa9, 0x7f, 0x80, 0xc2, 0xae, 0x3c, 0x2b, 0xa9, 0x43, 0xee, 0x41, 0xa6, 0xc1, 0xd9, 0xd0, 0x45,
	0x58, 0x0a, 0xb7, 0x5a, 0x0e, 0x7d, 0x45, 0x50, 0x15, 0x01, 0xa1, 0x19, 0x53, 0x00, 0xcb, 0xdb,
	0x90, 0x16, 0x24, 0x59, 0x84, 0x64, 0xa3, 0x27, 0xad, 0x67, 0x68, 0xd2, 0xec, 0x11, 0x02, 0xe9,
	0xa6, 0x31, 0x64, 0xf2, 0x88, 0x34, 0x9a, 0xb6, 0xf0, 0x5b, 0xff, 0x3e, 0x09, 0xb0, 0xe3, 0x18,
	0x56, 0xcf, 0x73, 0x76, 0x77, 0xd2, 0x59, 0xe4, 0x34, 0x42, 0xd0, 0x84, 0xaf, 0x9f, 0x12, 0xca,
	0xd9, 0x16, 0x14, 0x0e, 0x0c, 0xd3, 0xf2, 0x60, 0x3d, 0xe9, 0x23, 0x43, 0x0b, 0xc3, 0x90, 0x45,
	0xae, 0x03, 0xb4, 0xc7, 0xc7, 0x3e, 0x20, 0x25, 0x01, 0xe0, 0x06, 0x1c, 0x61, 0xe1, 0x1d, 0x33,
	0x9c, 0x03, 0xe1, 0x0e, 0x01, 0x69, 0xcf, 0xc2, 0x45, 0xc8, 0x22, 0x37, 0x61, 0x21, 0xf0, 0x21,
	0x77, 0x92, 0x91, 0x3b, 0x59, 0x18, 0x46, 0x99, 0x98, 0x1a, 0xf3, 0xbe, 0x1f, 0x09, 0xca, 0x4a,
	0xd0, 0xbc, 0x1b, 0xe1, 0x09, 0x4b, 0x81, 0x2f, 0x09, 0xca, 0x79, 0x96, 0x2e, 0xa2, 0x4c, 0xfd,
	0x9b, 0x04, 0x2c, 0xa8, 0x0c, 0x52, 0xa7, 0x76, 0x07, 0xe3, 0x23, 0x18, 0x32, 0xaa, 0x13, 0x69,
	0x1e, 0x39, 0x8c, 0x17, 0x73, 0x18, 0x1d, 0x19, 0xce, 0xbf, 0x47, 0x83, 0xab, 0x4a, 0x63, 0x25,
	0x2e, 0xa6, 0xa8, 0x02, 0xc7, 0x01, 0xb5, 0x53, 0x84, 0x05, 0x69, 0xe0, 0x48, 0xe6, 0x84, 0xc5,
	0xf5, 0x2b, 0xb0, 0x2c, 0x25, 0xaf, 0x99, 0xe3, 0x9a, 0xb6, 0xa5, 0x72, 0x51, 0xbf, 0x07, 0x2b,
	0x93, 0xec, 0x30, 0xb9, 0x14, 0xcb, 0x4f, 0xae, 0x33, 0x8f, 0xd4, 0x2f, 0x60, 0x51, 0x15, 0xb3,
	0x9f, 0xcf, 0x8f, 0x27, 0x13, 0xb1, 0x10, 0x53, 0xf7, 0x0a, 0xaa, 0x60, 0x41, 0xa6, 0x92, 0xdb,
	0x18, 0x8d, 0xa1, 0xd1, 0x67, 0x6a, 0x67, 0xab, 0x33, 0x8a, 0x52, 0x8a, 0xc1, 0x10, 0x3f, 0xfa,
	0xff, 0x13, 0xb0, 0xac, 0xf8, 0x3b, 0x06, 0xef, 0x9e, 0x7e, 0x81, 0x05, 0x54, 0x20, 0x2b, 0x5d,
	0xb8, 0xb8, 0x82, 0xd4, 0x27, 0x56, 0x90, 0x95, 0x2b, 0x70, 0xf5, 0xff, 0x41, 0x31, 0xb0, 0xa8,
	0x42, 0xf5, 0x64, 0xda, 0xfb, 0x56, 0x8c, 0x77, 0x0f, 0x3b, 0xe3, 0xfe, 0x2e, 0x64, 0xd5, 0xe5,
	0xe5, 0x05, 0x60, 0x2d, 0x4e, 0x55, 0x5c, 0x5d, 0x59, 0x47, 0xfe, 0xea, 0x5f, 0x27, 0x60, 0x65,
	0x32, 0x04, 0x5f, 0x60, 0x15, 0xf7, 0x21, 0xe7, 0xb9, 0xf1, 0xa3, 0x70, 0xe9, 0x32, 0x72, 0xde,
	0x32, 0x5c, 0xfd, 0x3d, 0x90, 0x40, 0x32, 0x30, 0xb8, 0x79, 0xc6, 0x68, 0xab, 0x21, 0xee, 0x87,
	0x43, 0xdb, 0x7d, 0xab, 0x6e, 0x8c, 0xf4, 0x08, 0xbf, 0x15, 0xef, 0x9d, 0xaa, 0x67, 0xc1, 0x7b,
	0x47, 0x56, 0x20, 0xf3, 0xc6, 0xec, 0xf1, 0x53, 0x55, 0xc3, 0x99, 0x8f, 0x82, 0x20, 0xab, 0x90,
	0x7d, 0xc1, 0xcc, 0xfe, 0x29, 0x57, 0x95, 0x9b, 0x3d, 0x95, 0x94, 0x7e, 0x02, 0x25, 0xe5, 0xeb,
	0xc0, 0x70, 0xfa, 0xa6, 0xa5, 0x3c, 0xed, 0xb3, 0x13, 0xee, 0x7b, 0x1a, 0xe0, 0x37, 0x29, 0x41,
	0xaa, 0x63, 0x8f, 0x94, 0xa3, 0x14, 0xb7, 0x47, 0xc2, 0x0f, 0x95, 0x06, 0x95, 0x1f, 0x47, 0x10,
	0xc2, 0xcf, 0x8e, 0xcd, 0xb9, 0x3d, 0xf4, 0xfd, 0x1c, 0x4b, 0x4a, 0xff, 0x21, 0x6c, 0x69, 0x87,
	0xf6, 0xe0, 0xa2, 0x6f, 0x4b, 0x4f, 0x4f, 0x41, 0x3b, 0xb4, 0x4d, 0x8b, 0x7f, 0xb2, 0xaf, 0x85,
	0x78, 0xef, 0xe6, 0x1e, 0xf9, 0x1a, 0xe4, 0x16, 0x14, 0xf7, 0xcc, 0x01, 0x67, 0x4e, 0xe7, 0x14,
	0x63, 0x77, 0x6a, 0x0f, 0xbc, 0x9b, 0x2d, 0x49, 0x8b, 0x27, 0x93, 0x6c, 0x44, 0x66, 0xa5, 0x23,
	0x17, 0x57, 0x2b, 0x0e, 0xa1, 0x14, 0x7a, 0x91, 0xfc, 0x3d, 0x9a, 0x95, 0x66, 0x5d, 0xfd, 0xdb,
	0x14, 0x5c, 0x89, 0xcd, 0x6b, 0xb2, 0x09, 0x5a, 0x1b, 0xb9, 0x58, 0xa7, 0xea, 0xde, 0xd6, 0xa8,
	0xe6, 0xfa, 0x0c, 0x52, 0x86, 0xbc, 0x68, 0xc0, 0x91, 0x2b, 0x3c, 0x3f, 0x56, 0xb4, 0x08, 0x55,
	0xc7, 0xfe, 0xc0, 0x2c, 0x19, 0x2a, 0x8d, 0x66, 0xb8, 0x20, 0x84, 0xbd, 0xbd, 0xb1, 0xd5, 0xe5,
	0xa8, 0xef, 0x62, 0xb4, 0x52, 0x18, 0x2d, 0xed, 0xc4, 0x67, 0x88, 0x43, 0x90, 0x51, 0xc9, 0x78,
	0x87, 0x20, 0x9b, 0xf9, 0x43, 0xc8, 0xb7, 0xb9, 0xed, 0xc8, 0x92, 0xca, 0x4e, 0x27, 0x93, 0x92,
	0xe0, 0x6a, 0x4f, 0xcc, 0x3e, 0xcd, 0xbb, 0x0a, 0x48, 0x76, 0x71, 0xeb, 0x86, 0x63, 0x60, 0xd7,
	0xc8, 0x49, 0x95, 0xbf, 0x7d, 0xa6, 0x7e, 0x2b, 0x1e, 0xba, 0x6e, 0x71, 0xe7, 0x02, 0xa3, 0x22,
	0x09, 0xd9, 0x3f, 0x4c, 0x4b, 0xf4, 0xfc, 0xb6, 0xf9, 0x5f, 0xb6, 0x9e, 0x57, 0xfd, 0x23, 0x64,
	0x79, 0x1d, 0xe6, 0x3c, 0x40, 0x68, 0x7e, 0x87, 0x09, 0x58, 0xe5, 0xc7, 0x50, 0x88, 0x98, 0x16,
	0x19, 0xf5, 0x81, 0x5d, 0xa8, 0x40, 0x8a, 0x4f, 0x11, 0xa6, 0x33, 0x63, 0x30, 0xf6, 0xe3, 0xe7,
	0x11, 0x4f, 0x92, 0x8f, 0x12, 0xfa, 0x6f, 0x49, 0x98, 0x8f, 0x5e, 0x19, 0xe4, 0x2f, 0x90, 0xae,
	0x19, 0xdc, 0x50, 0xe5, 0x58, 0x8c, 0x74, 0x78, 0x79, 0xa3, 0xa4, 0x7b, 0x28, 0x24, 0xcf, 0x82,
	0xfb, 0xe4, 0x80, 0x71, 0x43, 0xe2, 0x67, 0xe6, 0x9f, 0xb6, 0xd3, 0x15, 0x42, 0x81, 0xa7, 0xc5,
	0x8f, 0x93, 0x68, 0xf2, 0x2f, 0x1c, 0x9e, 0xfc, 0x0a, 0xb4, 0x4d, 0x95, 0x3a, 0x9b, 0x31, 0xf1,
	0x0b, 0xaa, 0x14, 0x67, 0xa8, 0x50, 0x81, 0x3c, 0x02, 0x4d, 0x55, 0x15, 0x6a, 0xa7, 0xa7, 0x07,
	0x84, 0xe9, 0xba, 0xa3, 0xda, 0xd0, 0x07, 0xe3, 0xf4, 0x05, 0xe1, 0x38, 0x87, 0x39, 0x20, 0x54,
	0xaf, 0x7e, 0x62, 0xe2, 0xa3, 0x30, 0x0e, 0x07, 0x45, 0x54, 0xf6, 0x6b, 0x06, 0xfd, 0x66, 0x2f,
	0x51, 0x0e, 0xcb, 0x8a, 0xc2, 0x28, 0x80, 0xeb, 0x3f, 0x27, 0x61, 0x35, 0xfe, 0x4e, 0xfb, 0x4c,
	0x01, 0x60, 0xe5, 0xb7, 0x71, 0x7c, 0x1c, 0xbb, 0xea, 0xf8, 0xb2, 0xae, 0xa4, 0x44, 0xb7, 0x3b,
	0x40, 0x90, 0x68, 0x44, 0x5e, 0xfa, 0xe7, 0x86, 0x1e, 0x89, 0x0d, 0x4a, 0x53, 0xa9, 0xd7, 0x71,
	0x67, 0x47, 0xc5, 0x8e, 0x39, 0xc4, 0x62, 0x77, 0x7c, 0x00, 0x76, 0x13, 0xf0, 0x17, 0x84, 0xf0,
	0x4c, 0x2c, 0x1c, 0x9c, 0x00, 0x41, 0x9e, 0x43, 0xae, 0xc6, 0x8e, 0xc7, 0xfd, 0x8e, 0x5f, 0x2b,
	0x77, 0x3e, 0x77, 0x69, 0x57, 0x14, 0xde, 0x4b, 0xfd, 0x5c, 0xcf, 0xa3, 0xca, 0x2f, 0x61, 0x3e,
	0x2a, 0x88, 0x49, 0xdc, 0x9b, 0xd1, 0xc4, 0x9d, 0x5d, 0x55, 0x24, 0x91, 0x7f, 0x49, 0xc2, 0xc2,
	0xc4, 0xad, 0x2f, 0xea, 0xa6, 0x61, 0x59, 0xcc, 0x51, 0xb1, 0xf3, 0xac, 0x16, 0xcc, 0x90, 0x25,
	0x26, 0x26, 0x89, 0xf0, 0xa3, 0xe8, 0x85, 0x77, 0xde, 0x8c, 0xf0, 0xc2, 0x5e, 0x9f, 0xfa, 0x03,
	0xbd, 0x1e, 0x87, 0xd6, 0xfc, 0x6b, 0x76, 0x6a, 0x76, 0x07, 0xcc, 0x55, 0x69, 0xb9, 0x32, 0x31,
	0xa2, 0x2b, 0x21, 0xcd, 0x9f, 0x29, 0x14, 0x3e, 0x23, 0xe0, 0x90, 0xf5, 0xf0, 0x20, 0x1c, 0xd3,
	0xb0, 0x54, 0x3e, 0xae, 0x4d, 0xe8, 0x84, 0x62, 0x4c, 0xa7, 0xe0, 0x9b, 0xbc, 0x80, 0x52, 0xd3,
	0xb6, 0x0e, 0xf0, 0x55, 0xe3, 0x04, 0x2e, 0xb3, 0xd3, 0x75, 0x84, 0xea, 0x53, 0x20, 0x5a, 0xb2,
	0xa6, 0xb4, 0xc8, 0x5f, 0x21, 0x23, 0xae, 0x12, 0xff, 0x1a, 0x5b, 0x9a, 0x50, 0x17, 0x12, 0x9a,
	0x39, 0x11, 0xf2, 0xed, 0xef, 0x12, 0x91, 0x37, 0x00, 0x59, 0xc2, 0x21, 0xb1, 0x59, 0xab, 0xbf,
	0x3d, 0xaa, 0xd5, 0xf7, 0xaa, 0xaf, 0xf6, 0x3b, 0xa5, 0x39, 0x52, 0xc4, 0x90, 0x4b, 0xd6, 0x41,
	0xab, 0xd3, 0xa2, 0xa5, 0x04, 0x59, 0xc6, 0x77, 0x84, 0x64, 0x34, 0x5b, 0x4d, 0xc5, 0x4c, 0xe2,
	0x6d, 0x54, 0xf2, 0x98, 0x87, 0xf5, 0x5a, 0xbd, 0xdd, 0xa1, 0x8d, 0x6a, 0xb3, 0x94, 0x22, 0x6b,
	0x38, 0xea, 0x49, 0xee, 0x7e, 0x63, 0xb7, 0xde, 0x6c, 0xd7, 0x8f, 0x0e, 0xf7, 0xab, 0x9d, 0x7a,
	0x29, 0x8d, 0xe3, 0x3c, 0x78, 0x82, 0xbd, 0xea, 0x6e, 0xbd, 0x94, 0x09, 0x9d, 0xec, 0xd0, 0x6a,
	0xb3, 0x56, 0xca, 0x6e, 0xff, 0x98, 0x08, 0x1a, 0xcb, 0xe4, 0x4b, 0x8d, 0xdc, 0x80, 0xab, 0x6f,
	0x1a, 0x9d, 0x66, 0xbd, 0xdd, 0x3e, 0x7a, 0xd5, 0xae, 0xd3, 0xa3, 0xd6, 0xce, 0xcb, 0xfa, 0x6e,
	0xe7, 0xa8, 0xd1, 0x7c, 0x5d, 0xdd, 0x6f, 0xd4, 0x70, 0xc1, 0x9b, 0xb0, 0x1e, 0x07, 0x90, 0x9e,
	0x12, 0xe4, 0x1a, 0x6c, 0xc4, 0x49, 0xfd, 0x7d, 0x6c, 0xc1, 0x66, 0x9c, 0x18, 0xb7, 0xea, 0x21,
	0x52, 0x98, 0x60, 0xd7, 0xe3, 0x10, 0x91, 0x7d, 0xa7, 0xb7, 0x9f, 0x05, 0x8b, 0x9f, 0x6c, 0xc7,
	0xa4, 0x00, 0xb9, 0x70, 0xa1, 0x18, 0x84, 0xdd, 0x56, 0x8b, 0xd6, 0x1a, 0x4d, 0x11, 0x94, 0x04,
	0xd1, 0x70, 0x46, 0xa8, 0x76, 0x1a, 0xad, 0x52, 0xf2, 0xc1, 0x57, 0xa9, 0x60, 0xb6, 0x6d, 0x33,
	0xe7, 0xcc, 0xec, 0x32, 0xb2, 0x23, 0xea, 0xbf, 0x6b, 0xf7, 0x2d, 0xd1, 0x3f, 0xd6, 0x2f, 0x6b,
	0x4b, 0xe5, 0x8d, 0x4b, 0xeb, 0x56, 0x9f, 0x23, 0xff, 0x86, 0x45, 0x35, 0xab, 0xf9, 0x86, 0xae,
	0xcd, 0xc0, 0xa3, 0xf3, 0x6c, 0xf9, 0xfa, 0x65, 0xe2, 0xc0, 0xe4, 0x53, 0xc8, 0x3f, 0x67, 0xdc,
	0x7b, 0x71, 0xad, 0x4e, 0xbd, 0x1d, 0x7d, 0x2b, 0x6b, 0x33, 0xfc, 0x40, 0x7d, 0x0f, 0x0a, 0xbe,
	0x3a, 0xbe, 0x28, 0xc9, 0xc6, 0xf4, 0xeb, 0x33, 0x78, 0xab, 0x96, 0xcb, 0x71, 0xa2, 0xc0, 0x0e,
	0x85, 0xa2, 0x6f, 0x47, 0xbd, 0x16, 0xa2, 0x5b, 0x8b, 0x79, 0x6f, 0x44, 0xb7, 0x16, 0xf7, 0xee,
	0xd0, 0xe7, 0x8e, 0xb3, 0xf2, 0xff, 0x0b, 0x0f, 0x7f, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x01,
	0x90, 0x97, 0x9b, 0x10, 0x00, 0x00,
}
